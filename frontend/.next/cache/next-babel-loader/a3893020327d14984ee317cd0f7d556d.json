{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport styled from 'styled-components';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nconst REMOVE_FROM_CART_MUTATION = gql`\n  mutation removeFromCart($id: ID!) {\n    removeFromCart(id: $id) {\n      id\n    }\n  }\n`;\nconst BigButton = styled.button.withConfig({\n  displayName: \"RemoveFromCart__BigButton\",\n  componentId: \"emvtd6-0\"\n})([\"font-size:3rem;background:none;border:0;&:hover{color:\", \";cursor:pointer;}\"], props => props.theme.red);\n\nclass RemoveFromCart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"update\", (cache, payload) => {\n      console.log('Running remove from cart update fn'); // 1. first read the cache\n\n      const data = cache.readQuery({\n        query: CURRENT_USER_QUERY\n      });\n      console.log('data === ', data);\n      console.log(' === payload', payload); // 2. remove that item from the cart\n\n      const cartItemId = payload.data.removeFromCart.id;\n      data.me.cart = data.me.cart.filter(cartItem => cartItem.id !== cartItemId); // 3. write it back to the cache\n\n      cache.writeQuery({\n        query: CURRENT_USER_QUERY,\n        data\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: REMOVE_FROM_CART_MUTATION // The line below; \"variables={{ id: this.props.id }}\" passes the id of the object to \n      // be deleted directly into the mutation here at the top\n      // An alternative method would be to put \"variables: this.props.id\" in the button tag\n      ,\n      variables: {\n        id: this.props.id\n      },\n      update: this.update // OptimisticResponse here functions to allow for immediate U.I response to the \n      // removeFromCart function. There's usually some seconds of delay when an item is \n      // deleted from the cart. This is because the cart has to wait for the response from \n      // the server before the item is taken out of the UI. The optimisticResponse removes \n      // the item from the UI while awaiting removal from the server.\n      ,\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeFromCart: {\n          __typename: 'CartItem',\n          id: this.props.id\n        }\n      }\n    }, (removeFromCart, {\n      loading,\n      error\n    }) => __jsx(BigButton, {\n      disabled: loading,\n      onClick: () => {\n        removeFromCart().catch(err => alert(err.message));\n      },\n      title: \"Delete Item\"\n    }, \"\\xD7\"));\n  }\n\n}\n\nexport default RemoveFromCart;\nexport { REMOVE_FROM_CART_MUTATION };","map":null,"metadata":{},"sourceType":"module"}