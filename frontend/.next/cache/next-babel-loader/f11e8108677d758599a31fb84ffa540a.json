{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nconst SINGLE_ITEM_QUERY = gql`\n  query SINGLE_ITEM_QUERY($id: ID!) {\n    item(where: { id: $id }) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\nconst UPDATE_ITEM_MUTATION = gql`\n  mutation UPDATE_ITEM_MUTATION($id: ID!, $title: String, $description: String, $price: Int) {\n    updateItem(id: $id, title: $title, description: $description, price: $price) {\n      id\n      title\n      description\n      price\n    }\n  }\n`;\n\nclass UpdateItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === 'number' ? parseFloat(value) : value;\n      this.setState({\n        [name]: val\n      });\n    });\n\n    _defineProperty(this, \"updateItem\", async (e, updateItemMutation) => {\n      e.preventDefault();\n      console.log('Updating Item!!');\n      console.log(this.state);\n      const res = await updateItemMutation({\n        variables: _objectSpread({\n          id: this.props.id\n        }, this.state)\n      });\n      console.log('Updated!!');\n    });\n  }\n\n  render() {\n    return __jsx(Query, {\n      query: SINGLE_ITEM_QUERY,\n      variables: {\n        id: this.props.id\n      }\n    }, ({\n      data,\n      loading\n    }) => {\n      if (loading) return __jsx(\"p\", null, \"Loading...\");\n      if (!data.item) return __jsx(\"p\", null, \"No Item Found for ID \", this.props.id);\n      return __jsx(Mutation, {\n        mutation: UPDATE_ITEM_MUTATION,\n        variables: this.state\n      }, (updateItem, {\n        loading,\n        error\n      }) => __jsx(Form, {\n        onSubmit: e => this.updateItem(e, updateItem)\n      }, __jsx(Error, {\n        error: error\n      }), __jsx(\"fieldset\", {\n        disabled: loading,\n        \"aria-busy\": loading\n      }, __jsx(\"label\", {\n        htmlFor: \"title\"\n      }, \"Title\", __jsx(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        name: \"title\",\n        placeholder: \"Title\",\n        required: true // In react, defaultValue allows us tie inputbox to some\n        // text without the inputbox being tied to state\n        ,\n        defaultValue: data.item.title,\n        onChange: this.handleChange\n      })), __jsx(\"label\", {\n        htmlFor: \"price\"\n      }, \"Price\", __jsx(\"input\", {\n        type: \"number\",\n        id: \"price\",\n        name: \"price\",\n        placeholder: \"Price\",\n        required: true,\n        defaultValue: data.item.price,\n        onChange: this.handleChange\n      })), __jsx(\"label\", {\n        htmlFor: \"description\"\n      }, \"Description\", __jsx(\"textarea\", {\n        id: \"description\",\n        name: \"description\",\n        placeholder: \"Enter A Description\",\n        required: true,\n        defaultValue: data.item.description,\n        onChange: this.handleChange\n      })), __jsx(\"button\", {\n        type: \"submit\"\n      }, \"Sav\", loading ? 'ing' : 'e', \" Changes\"))));\n    });\n  }\n\n}\n\nexport default UpdateItem;\nexport { UPDATE_ITEM_MUTATION };","map":null,"metadata":{},"sourceType":"module"}