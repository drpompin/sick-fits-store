{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/AddToCart.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nconst ADD_TO_CART_MUTATION = gql`\n  mutation addToCart($id: ID!) {\n    # addToCart below is the mutation endpoint that is called on the server side and id is passed to \n    # it as in ($id: $id!). id and quantity are what we are demanding from the endpoint\n    addToCart(id: $id) {\n      id\n      quantity\n    }\n  }\n`;\n\nclass AddToCart extends React.Component {\n  render() {\n    const {\n      id\n    } = this.props; // console.log('props in addToCart====', this.props, id);\n\n    return __jsx(Mutation, {\n      mutation: ADD_TO_CART_MUTATION,\n      variables: {\n        id\n      } // refetchQueries used below functions to update the ui from the cache when changes are \n      // made on the UI; there's no need to refresh the page everytime a new task is done except when \n      // necessary\n      ,\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, (addToCart, {\n      loading\n    }) => __jsx(\"button\", {\n      disabled: loading,\n      onClick: addToCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Add\", loading && 'ing', \" To Cart \\uD83D\\uDED2\"));\n  }\n\n}\n\nexport default AddToCart;","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/AddToCart.js"],"names":["React","Mutation","gql","CURRENT_USER_QUERY","ADD_TO_CART_MUTATION","AddToCart","Component","render","id","props","query","addToCart","loading"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,MAAMC,oBAAoB,GAAGF,GAAI;;;;;;;;;CAAjC;;AAWA,MAAMG,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AACpCC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKC,KAApB,CADK,CAEL;;AACA,WACI,MAAC,QAAD;AACI,MAAA,QAAQ,EAAEL,oBADd;AAEI,MAAA,SAAS,EAAE;AACPI,QAAAA;AADO,OAFf,CAKA;AACA;AACA;AAPA;AAQI,MAAA,cAAc,EAAE,CAAC;AAAEE,QAAAA,KAAK,EAAEP;AAAT,OAAD,CARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUK,CAACQ,SAAD,EAAY;AAAEC,MAAAA;AAAF,KAAZ,KACG;AAAQ,MAAA,QAAQ,EAAEA,OAAlB;AAA2B,MAAA,OAAO,EAAED,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACQC,OAAO,IAAI,KADnB,0BAXR,CADJ;AAkBH;;AAtBmC;;AAwBxC,eAAeP,SAAf","sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst ADD_TO_CART_MUTATION = gql`\n  mutation addToCart($id: ID!) {\n    # addToCart below is the mutation endpoint that is called on the server side and id is passed to \n    # it as in ($id: $id!). id and quantity are what we are demanding from the endpoint\n    addToCart(id: $id) {\n      id\n      quantity\n    }\n  }\n`;\n\nclass AddToCart extends React.Component {\n    render() {\n        const { id } = this.props;\n        // console.log('props in addToCart====', this.props, id);\n        return (\n            <Mutation\n                mutation={ADD_TO_CART_MUTATION}\n                variables={{\n                    id,\n                }}\n            // refetchQueries used below functions to update the ui from the cache when changes are \n            // made on the UI; there's no need to refresh the page everytime a new task is done except when \n            // necessary\n                refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n            >\n                {(addToCart, { loading }) => (\n                    <button disabled={loading} onClick={addToCart}>\n                        Add{loading && 'ing'} To Cart ðŸ›’\n                    </button>\n                )}\n            </Mutation>\n        );\n    }\n}\nexport default AddToCart;"]},"metadata":{},"sourceType":"module"}