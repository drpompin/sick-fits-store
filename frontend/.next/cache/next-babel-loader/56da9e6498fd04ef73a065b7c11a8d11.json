{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/CreateItem.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage'; //This is the mutation done to push the submitted data to the graphql server\n// It is exported at the bottom for use in other files\n// Basically, this function takes in pre-set variables and creates an item that contains the \n//the specified variables as its property\n\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    #   The createItem name is gotten from the graphql schema at the backend\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n        # We need the id of the item created; hence, id below\n      id\n    }\n  }\n`;\n\nclass CreateItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      title: 'Cool Shoes',\n      description: 'I love those shoes',\n      image: 'dog.jpg',\n      largeImage: 'large-dog.jpg',\n      price: 1000\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === 'number' ? _parseFloat(value) : value;\n      this.setState({\n        [name]: val\n      }); //Here, we're using computed property names so the \n      //handleCange function can be used for more than one input field\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: CREATE_ITEM_MUTATION,\n      variables: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, (createItem, {\n      loading,\n      error\n    }) => //This is an implicit return .i.e. It doesnt need a return keyword\n    __jsx(Form, {\n      onSubmit: async e => {\n        // Stop the form from submitting\n        e.preventDefault(); // call the mutation\n        // const res = await createItem();\n        // change them to the single item page\n\n        console.log('res=======>', this.state); // Router.push({\n        //     pathname: '/item',\n        //     query: { id: res.data.createItem.id },\n        // });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(Error, {\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), __jsx(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Title\", __jsx(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      placeholder: \"Title\",\n      required: true,\n      value: this.state.title,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), __jsx(\"label\", {\n      htmlFor: \"price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Price\", __jsx(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      name: \"price\",\n      placeholder: \"Price\",\n      required: true,\n      value: this.state.price,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), __jsx(\"label\", {\n      htmlFor: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Description\", __jsx(\"textarea\", {\n      id: \"description\",\n      name: \"description\",\n      placeholder: \"Enter A Description\",\n      required: true,\n      value: this.state.description,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/CreateItem.js"],"names":["React","Component","Mutation","gql","Router","Form","formatMoney","Error","CREATE_ITEM_MUTATION","CreateItem","title","description","image","largeImage","price","e","name","type","value","target","val","setState","render","state","createItem","loading","error","preventDefault","console","log","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\n\n\n//This is the mutation done to push the submitted data to the graphql server\n// It is exported at the bottom for use in other files\n// Basically, this function takes in pre-set variables and creates an item that contains the \n//the specified variables as its property\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    #   The createItem name is gotten from the graphql schema at the backend\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n        # We need the id of the item created; hence, id below\n      id\n    }\n  }\n`;\n\nclass CreateItem extends Component {\n    // Although Apollo manages the state, state here is used to manage initial state locally\n    // This is because data needs to be stored locally before been sent to the graphql API\n    state = {\n        title: 'Cool Shoes',\n        description: 'I love those shoes',\n        image: 'dog.jpg',\n        largeImage: 'large-dog.jpg',\n        price: 1000,\n    };\n    handleChange = e => {\n        const { name, type, value } = e.target;\n        const val = type === 'number' ? parseFloat(value) : value;\n        this.setState({ [name]: val }); //Here, we're using computed property names so the \n        //handleCange function can be used for more than one input field\n    };\n    render() {\n        return (\n            <Mutation mutation={CREATE_ITEM_MUTATION} variables={this.state}>\n                {(createItem, { loading, error }) => (\n                    //This is an implicit return .i.e. It doesnt need a return keyword\n                    <Form \n                        onSubmit={async e => {\n                            // Stop the form from submitting\n                            e.preventDefault();\n                            // call the mutation\n                            // const res = await createItem();\n                            // change them to the single item page\n                            console.log('res=======>', this.state);\n                            // Router.push({\n                            //     pathname: '/item',\n                            //     query: { id: res.data.createItem.id },\n                            // });\n                        }}\n                    >\n                    {/* The error msg is in the ErrorMessage file & is from apollo  */}\n                        <Error error={error} />\n                        {/* Fieldset used here allows us to disable the form if its loading.\n                        Hence, it takes the loading parameter in disabled mode\n                        Aria-busy attribute allows the padding at the top of form to mimic a loading feature */}\n                        <fieldset disabled={loading} aria-busy={loading}>\n                        {/* 'htmlFor' is used for labels because 'for' is a reserved word in react */}\n                            <label htmlFor=\"title\">\n                                Title\n                                <input\n                                    type=\"text\"\n                                    id=\"title\"\n                                    name=\"title\"\n                                    placeholder=\"Title\"\n                                    required\n                                    value={this.state.title}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n\n                            <label htmlFor=\"price\">\n                                Price\n                                <input\n                                    type=\"number\"\n                                    id=\"price\"\n                                    name=\"price\"\n                                    placeholder=\"Price\"\n                                    required\n                                    value={this.state.price}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n\n                            <label htmlFor=\"description\">\n                                Description\n                                <textarea\n                                    id=\"description\"\n                                    name=\"description\"\n                                    placeholder=\"Enter A Description\"\n                                    required\n                                    value={this.state.description}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                            <button type=\"submit\">Submit</button>\n                        </fieldset>\n                    </Form>\n                )}\n            </Mutation>\n        );\n    }\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };"]},"metadata":{},"sourceType":"module"}