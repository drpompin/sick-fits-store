{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Order.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nclass Order extends React.Component {\n  render() {\n    console.log('this.props======', this.props);\n    return __jsx(Query, {\n      query: SINGLE_ORDER_QUERY,\n      variables: {\n        id: this.props.id\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, ({\n      data,\n      error,\n      loading\n    }) => {\n      if (error) return __jsx(Error, {\n        error: error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 39\n        }\n      });\n      if (loading) return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 41\n        }\n      }, \"Loading...\");\n      const order = data.order;\n      return __jsx(OrderStyles, {\n        \"data-test\": \"order\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }\n      }, __jsx(Head, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 33\n        }\n      }, \"Sick Fits - Order \", order.id)), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 33\n        }\n      }, \"Order ID:\"), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 33\n        }\n      }, this.props.id)), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 33\n        }\n      }, \"Charge\"), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 33\n        }\n      }, order.charge)), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }\n      }, \"Date\"), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 33\n        }\n      }, format(order.createdAt, 'MMMM d, YYYY h:mm a'))), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 33\n        }\n      }, \"Order Total\"), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }\n      }, formatMoney(order.total))), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 33\n        }\n      }, \"Item Count\"), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 33\n        }\n      }, order.items.length)), __jsx(\"div\", {\n        className: \"items\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }\n      }, order.items.map(item => __jsx(\"div\", {\n        className: \"order-item\",\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 37\n        }\n      }, __jsx(\"img\", {\n        src: item.image,\n        alt: item.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 41\n        }\n      }), __jsx(\"div\", {\n        className: \"item-details\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 41\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 45\n        }\n      }, item.title), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 45\n        }\n      }, \"Qty: \", item.quantity), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 45\n        }\n      }, \"Each: \", formatMoney(item.price)), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 45\n        }\n      }, \"SubTotal: \", formatMoney(item.price * item.quantity)), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 45\n        }\n      }, item.description))))));\n    });\n  }\n\n}\n\n_defineProperty(Order, \"propTypes\", {\n  id: PropTypes.string.isRequired\n});\n\nexport default Order;\nexport { SINGLE_ORDER_QUERY };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Order.js"],"names":["React","PropTypes","Query","format","Head","gql","formatMoney","Error","OrderStyles","SINGLE_ORDER_QUERY","Order","Component","render","console","log","props","id","data","error","loading","order","charge","createdAt","total","items","length","map","item","image","title","quantity","price","description","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\n\nconst SINGLE_ORDER_QUERY = gql`\n  query SINGLE_ORDER_QUERY($id: ID!) {\n    order(id: $id) {\n      id\n      charge\n      total\n      createdAt\n      user {\n        id\n      }\n      items {\n        id\n        title\n        description\n        price\n        image\n        quantity\n      }\n    }\n  }\n`;\n\nclass Order extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n    };\n    render() {\n        console.log('this.props======', this.props);\n\n        return (\n            <Query query={SINGLE_ORDER_QUERY} variables={{ id: this.props.id }}>\n                {({ data, error, loading }) => {\n                    if (error) return <Error error={error} />;\n                    if (loading) return <p>Loading...</p>;\n                    const order = data.order;\n                    return (\n                        <OrderStyles data-test=\"order\">\n                            <Head>\n                                <title>Sick Fits - Order {order.id}</title>\n                            </Head>\n                            <p>\n                                <span>Order ID:</span>\n                                <span>{this.props.id}</span>\n                            </p>\n                            <p>\n                                <span>Charge</span>\n                                <span>{order.charge}</span>\n                            </p>\n                            <p>\n                                <span>Date</span>\n                                <span>{format(order.createdAt, 'MMMM d, YYYY h:mm a')}</span>\n                            </p>\n                            <p>\n                                <span>Order Total</span>\n                                <span>{formatMoney(order.total)}</span>\n                            </p>\n                            <p>\n                                <span>Item Count</span>\n                                <span>{order.items.length}</span>\n                            </p>\n                            <div className=\"items\">\n                                {order.items.map(item => (\n                                    <div className=\"order-item\" key={item.id}>\n                                        <img src={item.image} alt={item.title} />\n                                        <div className=\"item-details\">\n                                            <h2>{item.title}</h2>\n                                            <p>Qty: {item.quantity}</p>\n                                            <p>Each: {formatMoney(item.price)}</p>\n                                            <p>SubTotal: {formatMoney(item.price * item.quantity)}</p>\n                                            <p>{item.description}</p>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </OrderStyles>\n                    );\n                }}\n            </Query>\n        );\n    }\n}\n\nexport default Order;\nexport { SINGLE_ORDER_QUERY };"]},"metadata":{},"sourceType":"module"}