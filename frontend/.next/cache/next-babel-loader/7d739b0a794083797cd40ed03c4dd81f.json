{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Cart.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation {\\n    toggleCart @client\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    #   The @client in d below line ensures that apollo doesnt query the server but d client\\n    cartOpen @client\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport User from './User';\nimport CartStyles from './styles/CartStyles';\nimport Supreme from './styles/Supreme';\nimport CloseButton from './styles/CloseButton';\nimport SickButton from './styles/SickButton';\nimport CartItem from './CartItem';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport formatMoney from '../lib/formatMoney';\nvar LOCAL_STATE_QUERY = gql(_templateObject());\nvar TOGGLE_CART_MUTATION = gql(_templateObject2());\n\nvar Cart = function Cart() {\n  return __jsx(User, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, function (_ref) {\n    var me = _ref.data.me;\n    if (!me) return null;\n    console.log(me);\n    return __jsx(Mutation, {\n      mutation: TOGGLE_CART_MUTATION,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, function (toggleCart) {\n      return __jsx(Query, {\n        query: LOCAL_STATE_QUERY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, function (_ref2) {\n        var data = _ref2.data;\n        return __jsx(CartStyles, {\n          open: data.cartOpen,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, __jsx(\"header\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, __jsx(CloseButton, {\n          onClick: toggleCart,\n          title: \"close\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"\\xD7\"), __jsx(Supreme, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, me.name, \"'s Cart\"), __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \"You Have \", me.cart.length, \" Item\", me.cart.length === 1 ? '' : 's', \" in your cart.\")), __jsx(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, me.cart.map(function (cartItem) {\n          return __jsx(CartItem, {\n            key: cartItem.id,\n            cartItem: cartItem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          });\n        })), __jsx(\"footer\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, formatMoney(calcTotalPrice(me.cart))), __jsx(SickButton, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"Checkout\")));\n      });\n    });\n  });\n};\n\nexport default Cart;\nexport { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Cart.js"],"names":["React","Query","Mutation","gql","User","CartStyles","Supreme","CloseButton","SickButton","CartItem","calcTotalPrice","formatMoney","LOCAL_STATE_QUERY","TOGGLE_CART_MUTATION","Cart","me","data","console","log","toggleCart","cartOpen","name","cart","length","map","cartItem","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,IAAMC,iBAAiB,GAAGT,GAAH,mBAAvB;AAOA,IAAMU,oBAAoB,GAAGV,GAAH,oBAA1B;;AAMA,IAAMW,IAAI,GAAG,SAAPA,IAAO;AAAA,SACT,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,gBAAsB;AAAA,QAAXC,EAAW,QAAnBC,IAAmB,CAAXD,EAAW;AACnB,QAAI,CAACA,EAAL,EAAS,OAAO,IAAP;AACTE,IAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;AACA,WACI,MAAC,QAAD;AAAU,MAAA,QAAQ,EAAEF,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,UAAAM,UAAU;AAAA,aACP,MAAC,KAAD;AAAO,QAAA,KAAK,EAAEP,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK;AAAA,YAAGI,IAAH,SAAGA,IAAH;AAAA,eACG,MAAC,UAAD;AAAY,UAAA,IAAI,EAAEA,IAAI,CAACI,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,WAAD;AAAa,UAAA,OAAO,EAAED,UAAtB;AAAkC,UAAA,KAAK,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAII,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAUJ,EAAE,CAACM,IAAb,YAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACcN,EAAE,CAACO,IAAH,CAAQC,MADtB,WACmCR,EAAE,CAACO,IAAH,CAAQC,MAAR,KAAmB,CAAnB,GAAuB,EAAvB,GAA4B,GAD/D,mBALJ,CADJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKR,EAAE,CAACO,IAAH,CAAQE,GAAR,CAAY,UAAAC,QAAQ;AAAA,iBAAI,MAAC,QAAD;AAAU,YAAA,GAAG,EAAEA,QAAQ,CAACC,EAAxB;AAA4B,YAAA,QAAQ,EAAED,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAJ;AAAA,SAApB,CADL,CAVJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAId,WAAW,CAACD,cAAc,CAACK,EAAE,CAACO,IAAJ,CAAf,CAAf,CADJ,EAEI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,CAbJ,CADH;AAAA,OADL,CADO;AAAA,KADf,CADJ;AA4BH,GAhCL,CADS;AAAA,CAAb;;AAqCA,eAAeR,IAAf;AACA,SAASF,iBAAT,EAA4BC,oBAA5B","sourcesContent":["import React from 'react';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport User from './User';\nimport CartStyles from './styles/CartStyles';\nimport Supreme from './styles/Supreme';\nimport CloseButton from './styles/CloseButton';\nimport SickButton from './styles/SickButton';\nimport CartItem from './CartItem';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport formatMoney from '../lib/formatMoney';\n\nconst LOCAL_STATE_QUERY = gql`\n  query {\n    #   The @client in d below line ensures that apollo doesnt query the server but d client\n    cartOpen @client\n  }\n`;\n\nconst TOGGLE_CART_MUTATION = gql`\n  mutation {\n    toggleCart @client\n  }\n`;\n\nconst Cart = () => (\n    <User>\n        {({ data: { me } }) => {\n            if (!me) return null;\n            console.log(me);\n            return (\n                <Mutation mutation={TOGGLE_CART_MUTATION}>\n                    {toggleCart => (\n                        <Query query={LOCAL_STATE_QUERY}>\n                            {({ data }) => (\n                                <CartStyles open={data.cartOpen}>\n                                    <header>\n                                        <CloseButton onClick={toggleCart} title=\"close\">\n                                            &times;\n                                        </CloseButton>\n                                        <Supreme>{me.name}'s Cart</Supreme>\n                                        <p>\n                                            You Have {me.cart.length} Item{me.cart.length === 1 ? '' : 's'} in your cart.\n                                        </p>\n                                    </header>\n                                    <ul>\n                                        {me.cart.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem} />)}\n                                    </ul>\n                                    <footer>\n                                        <p>{formatMoney(calcTotalPrice(me.cart))}</p>\n                                        <SickButton>Checkout</SickButton>\n                                    </footer>\n                                </CartStyles>\n                            )}\n                        </Query>\n                    )}\n                </Mutation>\n            );\n        }}\n    </User>\n);\n\nexport default Cart;\nexport { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };"]},"metadata":{},"sourceType":"module"}