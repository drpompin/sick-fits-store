{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/RemoveFromCart.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation removeFromCart($id: ID!) {\\n    removeFromCart(id: $id) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nvar REMOVE_FROM_CART_MUTATION = gql(_templateObject());\nvar BigButton = styled.button.withConfig({\n  displayName: \"RemoveFromCart__BigButton\",\n  componentId: \"emvtd6-0\"\n})([\"font-size:3rem;background:none;border:0;&:hover{color:\", \";cursor:pointer;}\"], function (props) {\n  return props.theme.red;\n});\n\nvar RemoveFromCart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RemoveFromCart, _React$Component);\n\n  var _super = _createSuper(RemoveFromCart);\n\n  function RemoveFromCart() {\n    var _this;\n\n    _classCallCheck(this, RemoveFromCart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"update\", function (cache, payload) {\n      console.log('Running remove from cart update fn'); // 1. first read the cache\n\n      var data = cache.readQuery({\n        query: CURRENT_USER_QUERY\n      });\n      console.log('data === ', data);\n      console.log(' === payload', payload); // 2. remove that item from the cart\n\n      var cartItemId = payload.data.removeFromCart.id;\n      data.me.cart = data.me.cart.filter(function (cartItem) {\n        return cartItem.id !== cartItemId;\n      }); // 3. write it back to the cache\n\n      cache.writeQuery({\n        query: CURRENT_USER_QUERY,\n        data: data\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(RemoveFromCart, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Mutation, {\n        mutation: REMOVE_FROM_CART_MUTATION // The line below; \"variables={{ id: this.props.id }}\" passes the id of the object to \n        // be deleted directly into the mutation here at the top\n        // An alternative method would be to put \"variables: this.props.id\" in the button tag\n        ,\n        variables: {\n          id: this.props.id\n        },\n        update: this.update // OptimisticResponse here functions to allow for immediate U.I response to the \n        // removeFromCart function. There's usually some seconds of delay when an item is \n        // deleted from the cart. This is because the cart has to wait for the response from \n        // the server before the item is taken out of the UI. The optimisticResponse removes \n        // the item from the UI while awaiting removal from the server.\n        ,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          removeFromCart: {\n            __typename: 'CartItem',\n            id: this.props.id\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, function (removeFromCart, _ref) {\n        var loading = _ref.loading,\n            error = _ref.error;\n        return __jsx(BigButton, {\n          disabled: loading,\n          onClick: function onClick() {\n            removeFromCart()[\"catch\"](function (err) {\n              return alert(err.message);\n            });\n          },\n          title: \"Delete Item\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }\n        }, \"\\xD7\");\n      });\n    }\n  }]);\n\n  return RemoveFromCart;\n}(React.Component);\n\n_defineProperty(RemoveFromCart, \"propTypes\", {\n  id: PropTypes.string.isRequired\n});\n\nexport default RemoveFromCart;\nexport { REMOVE_FROM_CART_MUTATION };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/RemoveFromCart.js"],"names":["React","Mutation","styled","PropTypes","gql","CURRENT_USER_QUERY","REMOVE_FROM_CART_MUTATION","BigButton","button","props","theme","red","RemoveFromCart","cache","payload","console","log","data","readQuery","query","cartItemId","removeFromCart","id","me","cart","filter","cartItem","writeQuery","update","__typename","loading","error","err","alert","message","Component","string","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,IAAMC,yBAAyB,GAAGF,GAAH,mBAA/B;AAQA,IAAMG,SAAS,GAAGL,MAAM,CAACM,MAAV;AAAA;AAAA;AAAA,oFAKF,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYC,GAAhB;AAAA,CALH,CAAf;;IAUMC,c;;;;;;;;;;;;;;;;;;6DAKO,UAACC,KAAD,EAAQC,OAAR,EAAoB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EADyB,CAEzB;;AACA,UAAMC,IAAI,GAAGJ,KAAK,CAACK,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEd;AAAT,OAAhB,CAAb;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,IAAzB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,OAA5B,EALyB,CAMzB;;AACA,UAAMM,UAAU,GAAGN,OAAO,CAACG,IAAR,CAAaI,cAAb,CAA4BC,EAA/C;AACAL,MAAAA,IAAI,CAACM,EAAL,CAAQC,IAAR,GAAeP,IAAI,CAACM,EAAL,CAAQC,IAAR,CAAaC,MAAb,CAAoB,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACJ,EAAT,KAAgBF,UAApB;AAAA,OAA5B,CAAf,CARyB,CASzB;;AACAP,MAAAA,KAAK,CAACc,UAAN,CAAiB;AAAER,QAAAA,KAAK,EAAEd,kBAAT;AAA6BY,QAAAA,IAAI,EAAJA;AAA7B,OAAjB;AACH,K;;;;;;;6BACQ;AAAA;;AACL,aACI,MAAC,QAAD;AACI,QAAA,QAAQ,EAAEX,yBADd,CAEI;AACA;AACA;AAJJ;AAKI,QAAA,SAAS,EAAE;AAAEgB,UAAAA,EAAE,EAAE,KAAKb,KAAL,CAAWa;AAAjB,SALf;AAMI,QAAA,MAAM,EAAE,KAAKM,MANjB,CAQI;AACA;AACA;AACA;AACA;AAZJ;AAaI,QAAA,kBAAkB,EAAE;AAChBC,UAAAA,UAAU,EAAE,UADI;AAEhBR,UAAAA,cAAc,EAAE;AACZQ,YAAAA,UAAU,EAAE,UADA;AAEZP,YAAAA,EAAE,EAAE,KAAKb,KAAL,CAAWa;AAFH;AAFA,SAbxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAqBK,UAACD,cAAD;AAAA,YAAmBS,OAAnB,QAAmBA,OAAnB;AAAA,YAA4BC,KAA5B,QAA4BA,KAA5B;AAAA,eACG,MAAC,SAAD;AACI,UAAA,QAAQ,EAAED,OADd;AAEI,UAAA,OAAO,EAAE,mBAAM;AACXT,YAAAA,cAAc,WAAd,CAAuB,UAAAW,GAAG;AAAA,qBAAIC,KAAK,CAACD,GAAG,CAACE,OAAL,CAAT;AAAA,aAA1B;AACH,WAJL;AAKI,UAAA,KAAK,EAAC,aALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH;AAAA,OArBL,CADJ;AAmCH;;;;EArDwBlC,KAAK,CAACmC,S;;gBAA7BvB,c,eACiB;AACfU,EAAAA,EAAE,EAAEnB,SAAS,CAACiC,MAAV,CAAiBC;AADN,C;;AAuDvB,eAAezB,cAAf;AACA,SAASN,yBAAT","sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst REMOVE_FROM_CART_MUTATION = gql`\n  mutation removeFromCart($id: ID!) {\n    removeFromCart(id: $id) {\n      id\n    }\n  }\n`;\n\nconst BigButton = styled.button`\n  font-size: 3rem;\n  background: none;\n  border: 0;\n  &:hover {\n    color: ${props => props.theme.red};\n    cursor: pointer;\n  }\n`;\n\nclass RemoveFromCart extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n    };\n    // This gets called as soon as we get a response back from the server after a mutation has been performed\n    update = (cache, payload) => {\n        console.log('Running remove from cart update fn');\n        // 1. first read the cache\n        const data = cache.readQuery({ query: CURRENT_USER_QUERY });\n        console.log('data === ', data);\n        console.log(' === payload', payload);\n        // 2. remove that item from the cart\n        const cartItemId = payload.data.removeFromCart.id;\n        data.me.cart = data.me.cart.filter(cartItem => cartItem.id !== cartItemId);\n        // 3. write it back to the cache\n        cache.writeQuery({ query: CURRENT_USER_QUERY, data });\n    };\n    render() {\n        return (\n            <Mutation\n                mutation={REMOVE_FROM_CART_MUTATION}\n                // The line below; \"variables={{ id: this.props.id }}\" passes the id of the object to \n                // be deleted directly into the mutation here at the top\n                // An alternative method would be to put \"variables: this.props.id\" in the button tag\n                variables={{ id: this.props.id }}\n                update={this.update}\n                \n                // OptimisticResponse here functions to allow for immediate U.I response to the \n                // removeFromCart function. There's usually some seconds of delay when an item is \n                // deleted from the cart. This is because the cart has to wait for the response from \n                // the server before the item is taken out of the UI. The optimisticResponse removes \n                // the item from the UI while awaiting removal from the server.\n                optimisticResponse={{\n                    __typename: 'Mutation',\n                    removeFromCart: {\n                        __typename: 'CartItem',\n                        id: this.props.id,\n                    },\n                }}\n            >\n                {(removeFromCart, { loading, error }) => (\n                    <BigButton\n                        disabled={loading}\n                        onClick={() => {\n                            removeFromCart().catch(err => alert(err.message));\n                        }}\n                        title=\"Delete Item\"\n                    >\n                        &times;\n          </BigButton>\n                )}\n            </Mutation>\n        );\n    }\n}\n\nexport default RemoveFromCart;\nexport { REMOVE_FROM_CART_MUTATION };"]},"metadata":{},"sourceType":"module"}