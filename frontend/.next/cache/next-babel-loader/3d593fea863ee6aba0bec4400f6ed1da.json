{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/CreateItem.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_ITEM_MUTATION(\\n    $title: String!\\n    $description: String!\\n    $price: Int!\\n    $image: String\\n    $largeImage: String\\n  ) {\\n    #   The createItem name is gotten from the graphql schema at the backend\\n    createItem(\\n      title: $title\\n      description: $description\\n      price: $price\\n      image: $image\\n      largeImage: $largeImage\\n    ) {\\n        # We need the id of the item created; hence, id below\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage'; //This is the mutation done to push the submitted data to the graphql server\n// It is exported at the bottom for use in other files\n// Basically, this function takes in pre-set variables and creates an item that contains the \n//the specified variables as its property\n\nvar CREATE_ITEM_MUTATION = gql(_templateObject());\n\nvar CreateItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreateItem, _Component);\n\n  function CreateItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CreateItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CreateItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      title: 'Cool Shoes',\n      description: 'I love those shoes',\n      image: 'dog.jpg',\n      largeImage: 'large-dog.jpg',\n      price: 1000\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          type = _e$target.type,\n          value = _e$target.value;\n      var val = type === 'number' ? _parseFloat(value) : value;\n\n      _this.setState(_defineProperty({}, name, val)); //Here, we're using computed property names so the \n      //handleCange function can be used for more than one input field\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"uploadFile\", function _callee(e) {\n      var files, data, res, file;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // async uploadFile = e => {\n              console.log('uploading file...');\n              files = e.target.files;\n              data = new FormData();\n              data.append('file', files[0]);\n              data.append('upload_preset', 'sickfits');\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(fetch('https://api.cloudinary.com/v1_1/doednsebg/image/upload', {\n                method: 'POST',\n                body: data\n              }));\n\n            case 7:\n              res = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 10:\n              file = _context.sent;\n              console.log(file);\n\n              _this.setState({\n                image: file.secure_url,\n                largeImage: file.eager[0].secure_url\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(CreateItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Mutation, {\n        mutation: CREATE_ITEM_MUTATION,\n        variables: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, function (createItem, _ref) {\n        var loading = _ref.loading,\n            error = _ref.error;\n        return (//This is an implicit return .i.e. It doesnt need a return keyword\n          __jsx(Form, {\n            onSubmit: function _callee2(e) {\n              var res;\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      // Stop the form from submitting\n                      e.preventDefault(); // call the mutation\n\n                      _context2.next = 3;\n                      return _regeneratorRuntime.awrap(createItem());\n\n                    case 3:\n                      res = _context2.sent;\n                      //res here means response\n                      // change them to the single item page\n                      console.log('response=======>', res);\n                      Router.push({\n                        pathname: '/item',\n                        query: {\n                          id: res.data.createItem.id\n                        }\n                      });\n\n                    case 6:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, __jsx(Error, {\n            error: error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }), __jsx(\"fieldset\", {\n            disabled: loading,\n            \"aria-busy\": loading,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, __jsx(\"label\", {\n            htmlFor: \"file\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }, \"Image\", __jsx(\"input\", {\n            type: \"file\",\n            id: \"file\",\n            name: \"file\",\n            placeholder: \"Upload an image\",\n            required: true,\n            onChange: _this2.uploadFile,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }), _this2.state.image && __jsx(\"img\", {\n            width: \"200\",\n            src: _this2.state.image,\n            alt: \"Upload Preview\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          })), __jsx(\"label\", {\n            htmlFor: \"title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }, \"Title\", __jsx(\"input\", {\n            type: \"text\",\n            id: \"title\",\n            name: \"title\",\n            placeholder: \"Title\",\n            required: true,\n            value: _this2.state.title,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          })), __jsx(\"label\", {\n            htmlFor: \"price\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, \"Price\", __jsx(\"input\", {\n            type: \"number\",\n            id: \"price\",\n            name: \"price\",\n            placeholder: \"Price\",\n            required: true,\n            value: _this2.state.price,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          })), __jsx(\"label\", {\n            htmlFor: \"description\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, \"Description\", __jsx(\"textarea\", {\n            id: \"description\",\n            name: \"description\",\n            placeholder: \"Enter A Description\",\n            required: true,\n            value: _this2.state.description,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          })), __jsx(\"button\", {\n            type: \"submit\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          }, \"Submit\")))\n        );\n      });\n    }\n  }]);\n\n  return CreateItem;\n}(Component);\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/CreateItem.js"],"names":["React","Component","Mutation","gql","Router","Form","formatMoney","Error","CREATE_ITEM_MUTATION","CreateItem","title","description","image","largeImage","price","e","target","name","type","value","val","setState","console","log","files","data","FormData","append","fetch","method","body","res","json","file","secure_url","eager","state","createItem","loading","error","preventDefault","push","pathname","query","id","uploadFile","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\n\n\n//This is the mutation done to push the submitted data to the graphql server\n// It is exported at the bottom for use in other files\n// Basically, this function takes in pre-set variables and creates an item that contains the \n//the specified variables as its property\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    #   The createItem name is gotten from the graphql schema at the backend\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n        # We need the id of the item created; hence, id below\n      id\n    }\n  }\n`;\n\nclass CreateItem extends Component {\n    // Although Apollo manages the state, state here is used to manage initial state locally\n    // This is because data needs to be stored locally before been sent to the graphql API\n    state = {\n        title: 'Cool Shoes',\n        description: 'I love those shoes',\n        image: 'dog.jpg',\n        largeImage: 'large-dog.jpg',\n        price: 1000,\n    };\n    handleChange = e => {\n        const { name, type, value } = e.target;\n        const val = type === 'number' ? parseFloat(value) : value;\n        this.setState({ [name]: val }); //Here, we're using computed property names so the \n        //handleCange function can be used for more than one input field\n    };\n\n    uploadFile = async e => {\n    // async uploadFile = e => {\n        console.log('uploading file...');\n        const files = e.target.files;\n        const data = new FormData();\n        data.append('file', files[0]);\n        data.append('upload_preset', 'sickfits');\n\n        const res = await fetch('https://api.cloudinary.com/v1_1/doednsebg/image/upload', {\n            method: 'POST',\n            body: data,\n        });\n        const file = await res.json();\n        console.log(file);\n        this.setState({\n            image: file.secure_url,\n            largeImage: file.eager[0].secure_url,\n        });\n    };\n\n\n    render() {\n        return (\n            <Mutation mutation={CREATE_ITEM_MUTATION} variables={this.state}>\n                {(createItem, { loading, error }) => (\n                    //This is an implicit return .i.e. It doesnt need a return keyword\n                    <Form \n                        onSubmit={async e => {\n                            // Stop the form from submitting\n                            e.preventDefault();\n                            // call the mutation\n                            const res = await createItem(); //res here means response\n                            // change them to the single item page\n                            console.log('response=======>', res);\n                            Router.push({\n                                pathname: '/item',\n                                query: { id: res.data.createItem.id },\n                            });\n                        }}\n                    >\n                    {/* The error msg is in the ErrorMessage file & is from apollo  */}\n                        <Error error={error} />\n                        {/* Fieldset used here allows us to disable the form if its loading.\n                        Hence, it takes the loading parameter in disabled mode\n                        Aria-busy attribute allows the padding at the top of form to mimic a loading feature */}\n                        <fieldset disabled={loading} aria-busy={loading}>\n                        {/* 'htmlFor' is used for labels because 'for' is a reserved word in react */}\n                            <label htmlFor=\"file\">\n                                Image\n                                <input\n                                    type=\"file\"\n                                    id=\"file\"\n                                    name=\"file\"\n                                    placeholder=\"Upload an image\"\n                                    required\n                                    onChange={this.uploadFile}\n                                />\n                                {this.state.image && (\n                                    <img width=\"200\" src={this.state.image} alt=\"Upload Preview\" />\n                                )}\n                            </label>\n\n                            <label htmlFor=\"title\">\n                                Title\n                                <input\n                                    type=\"text\"\n                                    id=\"title\"\n                                    name=\"title\"\n                                    placeholder=\"Title\"\n                                    required\n                                    value={this.state.title}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n\n                            <label htmlFor=\"price\">\n                                Price\n                                <input\n                                    type=\"number\"\n                                    id=\"price\"\n                                    name=\"price\"\n                                    placeholder=\"Price\"\n                                    required\n                                    value={this.state.price}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n\n                            <label htmlFor=\"description\">\n                                Description\n                                <textarea\n                                    id=\"description\"\n                                    name=\"description\"\n                                    placeholder=\"Enter A Description\"\n                                    required\n                                    value={this.state.description}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                            <button type=\"submit\">Submit</button>\n                        </fieldset>\n                    </Form>\n                )}\n            </Mutation>\n        );\n    }\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };"]},"metadata":{},"sourceType":"module"}