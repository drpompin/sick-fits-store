{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport Page from '../components/Page';\nimport { ApolloProvider } from 'react-apollo';\nimport withData from '../lib/withData'; // In order to expose the apollo client to a react app, we just wrap the application in an \n// ApolloProvider\n\nclass MyApp extends App {\n  // This static getInitialProps is done to provide page numbers to the app; it actually runs\n  // before the first render of the app. Hence, anything returned can be exposed via the \n  // destructured this.props method in the render.\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    pageProps.query = ctx.query; //This exposes the query to the user .i.e.to every page of the app\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      apollo,\n      pageProps\n    } = this.props;\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, __jsx(ApolloProvider, {\n      client: apollo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n} // Wrapping MyApp in withData makes the Apollo client accessible via this.props\n\n\nexport default withData(MyApp);","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/pages/_app.js"],"names":["App","Page","ApolloProvider","withData","MyApp","getInitialProps","Component","ctx","pageProps","query","render","apollo","props"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,QAAP,MAAqB,iBAArB,C,CAGA;AACA;;AAEA,MAAMC,KAAN,SAAoBJ,GAApB,CAAwB;AAExB;AACA;AACA;AACI,eAAaK,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC7C,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIF,SAAS,CAACD,eAAd,EAA+B;AAC3BG,MAAAA,SAAS,GAAG,MAAMF,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACH;;AACDC,IAAAA,SAAS,CAACC,KAAV,GAAkBF,GAAG,CAACE,KAAtB,CAL6C,CAKhB;;AAC7B,WAAO;AAACD,MAAAA;AAAD,KAAP;AACH;;AAGDE,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEJ,MAAAA,SAAF;AAAaK,MAAAA,MAAb;AAAqBH,MAAAA;AAArB,QAAmC,KAAKI,KAA9C;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ,CADJ,CADJ;AASH;;AA1BmB,C,CA6BxB;;;AACA,eAAeL,QAAQ,CAACC,KAAD,CAAvB","sourcesContent":["import App from 'next/app';\nimport Page from '../components/Page';\nimport { ApolloProvider } from 'react-apollo';\nimport withData from '../lib/withData';\n\n\n// In order to expose the apollo client to a react app, we just wrap the application in an \n// ApolloProvider\n\nclass MyApp extends App {\n\n// This static getInitialProps is done to provide page numbers to the app; it actually runs\n// before the first render of the app. Hence, anything returned can be exposed via the \n// destructured this.props method in the render.\n    static async getInitialProps({ Component, ctx }) {\n        let pageProps = {};\n        if (Component.getInitialProps) {\n            pageProps = await Component.getInitialProps(ctx);\n        }\n        pageProps.query = ctx.query; //This exposes the query to the user .i.e.to every page of the app\n        return {pageProps};\n    }\n\n\n    render() {\n        const { Component, apollo, pageProps } = this.props\n        return (\n            <div>\n                <ApolloProvider client={apollo}>\n                    <Page>\n                        <Component {...pageProps} />\n                    </Page>\n                </ApolloProvider>\n            </div>        \n        )\n    }\n}\n\n// Wrapping MyApp in withData makes the Apollo client accessible via this.props\nexport default withData(MyApp)"]},"metadata":{},"sourceType":"module"}