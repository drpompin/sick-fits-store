{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { adopt } from 'react-adopt';\nimport User from './User';\nimport CartStyles from './styles/CartStyles';\nimport Supreme from './styles/Supreme';\nimport CloseButton from './styles/CloseButton';\nimport SickButton from './styles/SickButton';\nimport CartItem from './CartItem';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport formatMoney from '../lib/formatMoney';\nimport TakeMyMoney from './TakeMyMoney';\nconst LOCAL_STATE_QUERY = gql`\n  query {\n    #   The @client in d below line ensures that apollo doesnt query the server but d client\n    cartOpen @client\n  }\n`;\nconst TOGGLE_CART_MUTATION = gql`\n  mutation {\n    toggleCart @client\n  }\n`;\n/* adopt from \"react-adopt\" package is used here. It helps to deal with issues arising from \n renderProp */\n\n/* It composes all the renderProps functions into a single composed fxn/component that will \n eventually expose all the needed props \n  The older component is hashed out at the bottom for reference purpose\n */\n\n/* eslint-disable */\n\nconst Composed = adopt({\n  /* variable Composed is declared and equates to adopt which takes an object of all the \n   things we are composing together */\n  user: ({\n    render\n  }) => __jsx(User, null, render),\n  toggleCart: ({\n    render\n  }) => __jsx(Mutation, {\n    mutation: TOGGLE_CART_MUTATION\n  }, render),\n  localState: ({\n    render\n  }) => __jsx(Query, {\n    query: LOCAL_STATE_QUERY\n  }, render)\n});\n/* eslint-enable */\n\nconst Cart = () => __jsx(Composed, null, ({\n  user,\n  toggleCart,\n  localState\n}) => {\n  const me = user.data.me;\n  if (!me) return null;\n  return __jsx(CartStyles, {\n    open: localState.data.cartOpen\n  }, __jsx(\"header\", null, __jsx(CloseButton, {\n    onClick: toggleCart,\n    title: \"close\"\n  }, \"\\xD7\"), __jsx(Supreme, null, me.name, \"'s Cart\"), __jsx(\"p\", null, \"You Have \", me.cart.length, \" Item\", me.cart.length === 1 ? '' : 's', \" in your cart.\")), __jsx(\"ul\", null, me.cart.map(cartItem => __jsx(CartItem, {\n    key: cartItem.id,\n    cartItem: cartItem\n  }))), __jsx(\"footer\", null, __jsx(\"p\", null, formatMoney(calcTotalPrice(me.cart))), me.cart.length && __jsx(TakeMyMoney, null, __jsx(SickButton, null, \"Checkout\"))));\n});\n\nexport default Cart;\nexport { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION }; // import React from 'react';\n// import { Query, Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import User from './User';\n// import CartStyles from './styles/CartStyles';\n// import Supreme from './styles/Supreme';\n// import CloseButton from './styles/CloseButton';\n// import SickButton from './styles/SickButton';\n// import CartItem from './CartItem';\n// import calcTotalPrice from '../lib/calcTotalPrice';\n// import formatMoney from '../lib/formatMoney';\n// const LOCAL_STATE_QUERY = gql`\n//   query {\n//     #   The @client in d below line ensures that apollo doesnt query the server but d client\n//     cartOpen @client\n//   }\n// `;\n// const TOGGLE_CART_MUTATION = gql`\n//   mutation {\n//     toggleCart @client\n//   }\n// `;\n// const Cart = () => (\n//     <User>\n//         {({ data: { me } }) => {\n//             if (!me) return null;\n//             console.log(me);\n//             return (\n//                 <Mutation mutation={TOGGLE_CART_MUTATION}>\n//                     {toggleCart => (\n//                         <Query query={LOCAL_STATE_QUERY}>\n//                             {({ data }) => (\n//                                 <CartStyles open={data.cartOpen}>\n//                                     <header>\n//                                         <CloseButton onClick={toggleCart} title=\"close\">\n//                                             &times;\n//                                         </CloseButton>\n//                                         <Supreme>{me.name}'s Cart</Supreme>\n//                                         <p>\n//                                             You Have {me.cart.length} Item{me.cart.length === 1 ? '' : 's'} in your cart.\n//                                         </p>\n//                                     </header>\n//                                     <ul>\n//                                         {me.cart.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem} />)}\n//                                     </ul>\n//                                     <footer>\n//                                         <p>{formatMoney(calcTotalPrice(me.cart))}</p>\n//                                         <SickButton>Checkout</SickButton>\n//                                     </footer>\n//                                 </CartStyles>\n//                             )}\n//                         </Query>\n//                     )}\n//                 </Mutation>\n//             );\n//         }}\n//     </User>\n// );\n// export default Cart;\n// export { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };","map":null,"metadata":{},"sourceType":"module"}