{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/RemoveFromCart.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nconst REMOVE_FROM_CART_MUTATION = gql`\n  mutation removeFromCart($id: ID!) {\n    removeFromCart(id: $id) {\n      id\n    }\n  }\n`;\nconst BigButton = styled.button.withConfig({\n  displayName: \"RemoveFromCart__BigButton\",\n  componentId: \"emvtd6-0\"\n})([\"font-size:3rem;background:none;border:0;&:hover{color:\", \";cursor:pointer;}\"], props => props.theme.red);\n\nclass RemoveFromCart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"update\", (cache, payload) => {\n      console.log('Running remove from cart update fn'); // 1. first read the cache\n\n      const data = cache.readQuery({\n        query: CURRENT_USER_QUERY\n      });\n      console.log('data === ', data);\n      console.log(' === payload', payload); // 2. remove that item from the cart\n\n      const cartItemId = payload.data.removeFromCart.id;\n      data.me.cart = data.me.cart.filter(cartItem => cartItem.id !== cartItemId); // 3. write it back to the cache\n\n      cache.writeQuery({\n        query: CURRENT_USER_QUERY,\n        data\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: REMOVE_FROM_CART_MUTATION // The line below; \"variables={{ id: this.props.id }}\" passes the id of the object to \n      // be deleted directly into the mutation here at the top\n      // An alternative method would be to put \"variables: this.props.id\" in the button tag\n      ,\n      variables: {\n        id: this.props.id\n      },\n      update: this.update // Optimistic response here functions to allow for immediate U.I response to \n      ,\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeFromCart: {\n          __typename: 'CartItem',\n          id: this.props.id\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, (removeFromCart, {\n      loading,\n      error\n    }) => __jsx(BigButton, {\n      disabled: loading,\n      onClick: () => {\n        removeFromCart().catch(err => alert(err.message));\n      },\n      title: \"Delete Item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"\\xD7\"));\n  }\n\n}\n\n_defineProperty(RemoveFromCart, \"propTypes\", {\n  id: PropTypes.string.isRequired\n});\n\nexport default RemoveFromCart;","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/RemoveFromCart.js"],"names":["React","Mutation","styled","PropTypes","gql","CURRENT_USER_QUERY","REMOVE_FROM_CART_MUTATION","BigButton","button","props","theme","red","RemoveFromCart","Component","cache","payload","console","log","data","readQuery","query","cartItemId","removeFromCart","id","me","cart","filter","cartItem","writeQuery","render","update","__typename","loading","error","catch","err","alert","message","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,MAAMC,yBAAyB,GAAGF,GAAI;;;;;;CAAtC;AAQA,MAAMG,SAAS,GAAGL,MAAM,CAACM,MAAV;AAAA;AAAA;AAAA,oFAKFC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,GALnB,CAAf;;AAUA,MAAMC,cAAN,SAA6BZ,KAAK,CAACa,SAAnC,CAA6C;AAAA;AAAA;;AAAA,oCAKhC,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EADyB,CAEzB;;AACA,YAAMC,IAAI,GAAGJ,KAAK,CAACK,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEf;AAAT,OAAhB,CAAb;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,IAAzB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,OAA5B,EALyB,CAMzB;;AACA,YAAMM,UAAU,GAAGN,OAAO,CAACG,IAAR,CAAaI,cAAb,CAA4BC,EAA/C;AACAL,MAAAA,IAAI,CAACM,EAAL,CAAQC,IAAR,GAAeP,IAAI,CAACM,EAAL,CAAQC,IAAR,CAAaC,MAAb,CAAoBC,QAAQ,IAAIA,QAAQ,CAACJ,EAAT,KAAgBF,UAAhD,CAAf,CARyB,CASzB;;AACAP,MAAAA,KAAK,CAACc,UAAN,CAAiB;AAAER,QAAAA,KAAK,EAAEf,kBAAT;AAA6Ba,QAAAA;AAA7B,OAAjB;AACH,KAhBwC;AAAA;;AAiBzCW,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,QAAD;AACI,MAAA,QAAQ,EAAEvB,yBADd,CAEI;AACA;AACA;AAJJ;AAKI,MAAA,SAAS,EAAE;AAAEiB,QAAAA,EAAE,EAAE,KAAKd,KAAL,CAAWc;AAAjB,OALf;AAMI,MAAA,MAAM,EAAE,KAAKO,MANjB,CAOI;AAPJ;AAQI,MAAA,kBAAkB,EAAE;AAChBC,QAAAA,UAAU,EAAE,UADI;AAEhBT,QAAAA,cAAc,EAAE;AACZS,UAAAA,UAAU,EAAE,UADA;AAEZR,UAAAA,EAAE,EAAE,KAAKd,KAAL,CAAWc;AAFH;AAFA,OARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAgBK,CAACD,cAAD,EAAiB;AAAEU,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAjB,KACG,MAAC,SAAD;AACI,MAAA,QAAQ,EAAED,OADd;AAEI,MAAA,OAAO,EAAE,MAAM;AACXV,QAAAA,cAAc,GAAGY,KAAjB,CAAuBC,GAAG,IAAIC,KAAK,CAACD,GAAG,CAACE,OAAL,CAAnC;AACH,OAJL;AAKI,MAAA,KAAK,EAAC,aALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBR,CADJ;AA8BH;;AAhDwC;;gBAAvCzB,c,eACiB;AACfW,EAAAA,EAAE,EAAEpB,SAAS,CAACmC,MAAV,CAAiBC;AADN,C;;AAkDvB,eAAe3B,cAAf","sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst REMOVE_FROM_CART_MUTATION = gql`\n  mutation removeFromCart($id: ID!) {\n    removeFromCart(id: $id) {\n      id\n    }\n  }\n`;\n\nconst BigButton = styled.button`\n  font-size: 3rem;\n  background: none;\n  border: 0;\n  &:hover {\n    color: ${props => props.theme.red};\n    cursor: pointer;\n  }\n`;\n\nclass RemoveFromCart extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n    };\n    // This gets called as soon as we get a response back from the server after a mutation has been performed\n    update = (cache, payload) => {\n        console.log('Running remove from cart update fn');\n        // 1. first read the cache\n        const data = cache.readQuery({ query: CURRENT_USER_QUERY });\n        console.log('data === ', data);\n        console.log(' === payload', payload);\n        // 2. remove that item from the cart\n        const cartItemId = payload.data.removeFromCart.id;\n        data.me.cart = data.me.cart.filter(cartItem => cartItem.id !== cartItemId);\n        // 3. write it back to the cache\n        cache.writeQuery({ query: CURRENT_USER_QUERY, data });\n    };\n    render() {\n        return (\n            <Mutation\n                mutation={REMOVE_FROM_CART_MUTATION}\n                // The line below; \"variables={{ id: this.props.id }}\" passes the id of the object to \n                // be deleted directly into the mutation here at the top\n                // An alternative method would be to put \"variables: this.props.id\" in the button tag\n                variables={{ id: this.props.id }}\n                update={this.update}\n                // Optimistic response here functions to allow for immediate U.I response to \n                optimisticResponse={{\n                    __typename: 'Mutation',\n                    removeFromCart: {\n                        __typename: 'CartItem',\n                        id: this.props.id,\n                    },\n                }}\n            >\n                {(removeFromCart, { loading, error }) => (\n                    <BigButton\n                        disabled={loading}\n                        onClick={() => {\n                            removeFromCart().catch(err => alert(err.message));\n                        }}\n                        title=\"Delete Item\"\n                    >\n                        &times;\n          </BigButton>\n                )}\n            </Mutation>\n        );\n    }\n}\n\nexport default RemoveFromCart;"]},"metadata":{},"sourceType":"module"}