{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react'; // Downshift allows us to use the arrow keys to scroll in the search box. It also enables close\n// on escape key or on outside click\n\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router'; //ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\n\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag'; //debounce prevents unnecessary query of the apollo client by delaying the time to run the query\n\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\nconst SearchInput = styled.input.withConfig({\n  displayName: \"Search__SearchInput\",\n  componentId: \"jovxb7-0\"\n})([\"outline:none;\"]);\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id\n    }\n  });\n}\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      console.log('Searching...'); // turn loading on\n\n      this.setState({\n        loading: true\n      }); // Manually query apollo client\n\n      const res = await client.query({\n        query: SEARCH_ITEMS_QUERY,\n        variables: {\n          searchTerm: e.target.value\n        }\n      });\n      this.setState({\n        items: res.data.items,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    resetIdCounter();\n    return __jsx(SearchStyles, null, __jsx(Downshift, {\n      onChange: routeToItem,\n      itemToString: item => item === null ? '' : item.title\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", null, __jsx(ApolloConsumer, null, client => __jsx(SearchInput, getInputProps({\n      type: 'search',\n      placeholder: 'Search For An Item',\n      id: 'search',\n      className: this.state.loading ? 'loading' : '',\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    }))), isOpen && __jsx(DropDown, null, this.state.items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      item\n    }), {\n      key: item.id,\n      highlighted: index === highlightedIndex\n    }), __jsx(\"img\", {\n      width: \"50\",\n      src: item.image,\n      alt: item.title\n    }), item.title)), !this.state.items.length && !this.state.loading && __jsx(DropDownItem, null, \" Nothing Found for \", inputValue)))));\n  }\n\n}\n\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}