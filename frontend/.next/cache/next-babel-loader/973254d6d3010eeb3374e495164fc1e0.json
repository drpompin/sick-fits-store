{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    @font-face {\\n        font-family: 'radnika-next';\\n        src: url('/static/radnikanext-medium-webfont.woff2')format('woff2');\\n        font-weight: normal;\\n        font-style: normal;\\n    }\\n\\n    html {\\n        box-sizing: border-box;\\n        font-size: 10px;\\n    }\\n\\n    *, *:before, *:after {\\n        box-sizing: inherit; /* inherits the border-box feature from html above */\\n    }\\n\\n    body {\\n        padding: 0;\\n        margin: 0;\\n        font-size: 1.5rem;\\n        line-height: 2;\\n        font-family: 'radnika-next';\\n    }\\n\\n    a {\\n        text-decoration: none;\\n        color: \", \";\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled, { ThemeProvider, injectGlobal } from 'styled-components'; //It is best to import packages first before importing local components. It is standard practice\n\nimport Header from './Header';\nimport Meta from './Meta';\nvar theme = {\n  red: '#FF0000',\n  black: '#393939',\n  grey: '#3A3A3A',\n  lightgrey: '#E1E1E1',\n  offWhite: '#EDEDED',\n  maxWidth: '1000px',\n  bs: '0 12px 24px 0 rgba(0, 0, 0, 0.09)'\n};\nvar Styledpage = styled.div.withConfig({\n  displayName: \"Page__Styledpage\",\n  componentId: \"sc-4u7a64-0\"\n})([\"background:white;color:\", \";\"], function (props) {\n  return props.theme.black;\n});\nvar Inner = styled.div.withConfig({\n  displayName: \"Page__Inner\",\n  componentId: \"sc-4u7a64-1\"\n})([\"max-width:\", \";margin:0 auto;padding:2rem;\"], function (props) {\n  return props.theme.maxWidth;\n});\ninjectGlobal(_templateObject(), theme.black);\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  var _super = _createSuper(Page);\n\n  function Page() {\n    _classCallCheck(this, Page);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(ThemeProvider, {\n        theme: theme\n      }, __jsx(Styledpage, null, __jsx(Meta, null), __jsx(Header, null), __jsx(Inner, null, this.props.children)));\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}