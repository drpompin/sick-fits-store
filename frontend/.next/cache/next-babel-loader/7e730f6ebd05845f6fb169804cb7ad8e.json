{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage'; //This is the mutation done to push the submitted data to the graphql server\n// It is exported at the bottom for use in other files\n// Basically, this function takes in pre-set variables and creates an item that contains the \n// specified variables as its property\n\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    #The createItem name below is gotten from the graphql schema at the backend; its the called \n    # endpoint on the server side\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n        # We need the id of the item created; hence, id below\n      id\n    }\n  }\n`;\n\nclass CreateItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      title: '',\n      description: '',\n      image: '',\n      largeImage: '',\n      price: 0\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === 'number' ? parseFloat(value) : value;\n      this.setState({\n        [name]: val\n      }); //Here, we're using computed property names (es6 destructuring)\n      //so the handleChange function can be used for more than one input field\n    });\n\n    _defineProperty(this, \"uploadFile\", async e => {\n      // console.log('uploading file...');\n      const files = e.target.files;\n      const data = new FormData();\n      data.append('file', files[0]);\n      data.append('upload_preset', 'sickfits');\n      const res = await fetch('https://api.cloudinary.com/v1_1/doednsebg/image/upload', {\n        method: 'POST',\n        body: data\n      });\n      const file = await res.json(); // console.log(file);\n\n      this.setState({\n        image: file.secure_url,\n        largeImage: file.eager[0].secure_url\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: CREATE_ITEM_MUTATION,\n      variables: this.state\n    }, (createItem, {\n      loading,\n      error\n    }) => //This is an implicit return .i.e. It doesnt need a return keyword\n    __jsx(Form, {\n      \"data-test\": \"form\",\n      onSubmit: async e => {\n        // Stop the form from submitting\n        e.preventDefault(); // call the mutation\n\n        const res = await createItem(); //res here means response\n        // change them to the single item page\n\n        console.log('response=======>', res);\n        Router.push({\n          pathname: '/item',\n          query: {\n            id: res.data.createItem.id\n          }\n        });\n      }\n    }, __jsx(Error, {\n      error: error\n    }), __jsx(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading\n    }, __jsx(\"label\", {\n      htmlFor: \"file\"\n    }, \"Image\", __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      name: \"file\",\n      placeholder: \"Upload an image\",\n      required: true,\n      onChange: this.uploadFile\n    }), this.state.image && __jsx(\"img\", {\n      width: \"200\",\n      src: this.state.image,\n      alt: \"Upload Preview\"\n    })), __jsx(\"label\", {\n      htmlFor: \"title\"\n    }, \"Title\", __jsx(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      placeholder: \"Title\",\n      required: true,\n      value: this.state.title,\n      onChange: this.handleChange\n    })), __jsx(\"label\", {\n      htmlFor: \"price\"\n    }, \"Price\", __jsx(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      name: \"price\",\n      placeholder: \"Price\",\n      required: true,\n      value: this.state.price,\n      onChange: this.handleChange\n    })), __jsx(\"label\", {\n      htmlFor: \"description\"\n    }, \"Description\", __jsx(\"textarea\", {\n      id: \"description\",\n      name: \"description\",\n      placeholder: \"Enter A Description\",\n      required: true,\n      value: this.state.description,\n      onChange: this.handleChange\n    })), __jsx(\"button\", {\n      type: \"submit\"\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };","map":null,"metadata":{},"sourceType":"module"}