{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nimport App from 'next/app';\nimport Page from '../components/Page';\nimport { ApolloProvider } from 'react-apollo';\nimport withData from '../lib/withData'; // In order to expose the apollo client to a react app, we just wrap the application in an \n// ApolloProvider\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(MyApp, _App);\n\n  var _super = _createSuper(MyApp);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          apollo = _this$props.apollo,\n          pageProps = _this$props.pageProps;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }\n      }, __jsx(ApolloProvider, {\n        client: apollo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }\n      }, __jsx(Page, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }\n      }, __jsx(Component, _extends({}, pageProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }\n      })))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    // This static getInitialProps is done to provide page numbers to the app; it actually runs\n    // before the first render of the app. Hence, anything returned can be exposed via the \n    // destructured this.props method in the render.\n    value: function getInitialProps(_ref) {\n      var Component, ctx, pageProps;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Component = _ref.Component, ctx = _ref.ctx;\n              pageProps = {};\n\n              if (!Component.getInitialProps) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n            case 5:\n              pageProps = _context.sent;\n\n            case 6:\n              pageProps.query = ctx.query; //This exposes the query to the user .i.e.to every page of the app\n\n              return _context.abrupt(\"return\", {\n                pageProps: pageProps\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return MyApp;\n}(App); // Wrapping MyApp in withData makes the Apollo client accessible via this.props\n\n\nexport default withData(MyApp);","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/pages/_app.js"],"names":["App","Page","ApolloProvider","withData","MyApp","props","Component","apollo","pageProps","ctx","getInitialProps","query"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,QAAP,MAAqB,iBAArB,C,CAGA;AACA;;IAEMC,K;;;;;;;;;;;;;;;6BAeO;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACGC,SADH,eACGA,SADH;AAAA,UACcC,MADd,eACcA,MADd;AAAA,UACsBC,SADtB,eACsBA,SADtB;AAEL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,SAAD,eAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CADJ,CADJ,CADJ;AASH;;;AAxBL;AACA;AACA;;;;;;;AACmCF,cAAAA,S,QAAAA,S,EAAWG,G,QAAAA,G;AAClCD,cAAAA,S,GAAY,E;;mBACZF,SAAS,CAACI,e;;;;;;+CACQJ,SAAS,CAACI,eAAV,CAA0BD,GAA1B,C;;;AAAlBD,cAAAA,S;;;AAEJA,cAAAA,SAAS,CAACG,KAAV,GAAkBF,GAAG,CAACE,KAAtB,C,CAA6B;;+CACtB;AAACH,gBAAAA,SAAS,EAATA;AAAD,e;;;;;;;;;;;;EAXKR,G,GA6BpB;;;AACA,eAAeG,QAAQ,CAACC,KAAD,CAAvB","sourcesContent":["import App from 'next/app';\nimport Page from '../components/Page';\nimport { ApolloProvider } from 'react-apollo';\nimport withData from '../lib/withData';\n\n\n// In order to expose the apollo client to a react app, we just wrap the application in an \n// ApolloProvider\n\nclass MyApp extends App {\n\n// This static getInitialProps is done to provide page numbers to the app; it actually runs\n// before the first render of the app. Hence, anything returned can be exposed via the \n// destructured this.props method in the render.\n    static async getInitialProps({ Component, ctx }) {\n        let pageProps = {};\n        if (Component.getInitialProps) {\n            pageProps = await Component.getInitialProps(ctx);\n        }\n        pageProps.query = ctx.query; //This exposes the query to the user .i.e.to every page of the app\n        return {pageProps};\n    }\n\n\n    render() {\n        const { Component, apollo, pageProps } = this.props\n        return (\n            <div>\n                <ApolloProvider client={apollo}>\n                    <Page>\n                        <Component {...pageProps} />\n                    </Page>\n                </ApolloProvider>\n            </div>        \n        )\n    }\n}\n\n// Wrapping MyApp in withData makes the Apollo client accessible via this.props\nexport default withData(MyApp)"]},"metadata":{},"sourceType":"module"}