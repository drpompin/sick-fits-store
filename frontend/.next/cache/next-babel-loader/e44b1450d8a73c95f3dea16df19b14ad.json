{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js\";\nvar __jsx = React.createElement;\nimport React from 'react'; // Downshift allows us to use the arrow keys to scroll in the search box. It also enables close\n// on escape key or on outside click\n\nimport Downshift, { d } from 'downshift';\nimport Router from 'next/router'; //ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\n\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag'; //debounce prevents unnecessary query of the apollo client by delaying the time to run the query\n\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\nconst SearchInput = styled.input.withConfig({\n  displayName: \"Search__SearchInput\",\n  componentId: \"jovxb7-0\"\n})([\"outline:none;\"]);\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id\n    }\n  });\n}\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      console.log('Searching...'); // turn loading on\n\n      this.setState({\n        loading: true\n      }); // Manually query apollo client\n\n      const res = await client.query({\n        query: SEARCH_ITEMS_QUERY,\n        variables: {\n          searchTerm: e.target.value\n        }\n      });\n      this.setState({\n        items: res.data.items,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    return __jsx(SearchStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(Downshift, {\n      onChange: routeToItem,\n      itemToString: item => item === null ? '' : item.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(ApolloConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, client => __jsx(SearchInput, _extends({}, getInputProps({\n      type: 'search',\n      placeholder: 'Search For An Item',\n      id: 'search',\n      className: this.state.loading ? 'loading' : '',\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), isOpen && __jsx(DropDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      item\n    }), {\n      key: item.id,\n      highlighted: index === highlightedIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), __jsx(\"img\", {\n      width: \"50\",\n      src: item.image,\n      alt: item.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), item.title)), !this.state.items.length && !this.state.loading && __jsx(DropDownItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \" Nothing Found for \", inputValue)))));\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js"],"names":["React","Downshift","d","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","styled","SEARCH_ITEMS_QUERY","SearchInput","input","routeToItem","item","push","pathname","query","id","AutoComplete","Component","items","loading","e","client","console","log","setState","res","variables","searchTerm","target","value","data","render","title","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","state","onChange","persist","map","index","image","length"],"mappings":"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","sourcesContent":["import React from 'react';\n// Downshift allows us to use the arrow keys to scroll in the search box. It also enables close\n// on escape key or on outside click\nimport Downshift, { d } from 'downshift';\nimport Router from 'next/router';\n//ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\nimport { ApolloConsumer } from 'react-apollo'; \nimport gql from 'graphql-tag';\n//debounce prevents unnecessary query of the apollo client by delaying the time to run the query\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\n\n\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\n\n\nconst SearchInput = styled.input`\n    outline: none;\n`\n\n\nfunction routeToItem(item) {\n    Router.push({\n        pathname: '/item',\n        query: {\n            id: item.id,\n        },\n    });\n}\n\nclass AutoComplete extends React.Component {\n    state = {\n        items: [],\n        loading: false,\n    };\n    onChange = debounce(async (e, client) => {\n        console.log('Searching...');\n        // turn loading on\n        this.setState({ loading: true });\n        // Manually query apollo client\n        const res = await client.query({\n            query: SEARCH_ITEMS_QUERY,\n            variables: { searchTerm: e.target.value },\n        });\n        this.setState({\n            items: res.data.items,\n            loading: false,\n        });\n    }, 350);\n    render() {\n        return (\n            <SearchStyles>\n                <Downshift onChange={routeToItem} itemToString={item => (item === null ? '' : item.title)}>\n                    {({ getInputProps, getItemProps, isOpen, inputValue, highlightedIndex }) => (\n                        <div>\n                            <ApolloConsumer>\n                                {client => (\n                                    <SearchInput\n                                        {...getInputProps({\n                                            type: 'search',\n                                            placeholder: 'Search For An Item',\n                                            id: 'search',\n                                            className: this.state.loading ? 'loading' : '',\n                                            onChange: e => {\n                                                e.persist();\n                                                this.onChange(e, client);\n                                            },\n                                        })}\n                                    />\n                                )}\n                            </ApolloConsumer>\n                            {isOpen && (\n                                <DropDown>\n                                    {this.state.items.map((item, index) => (\n                                        <DropDownItem\n                                            {...getItemProps({ item })}\n                                            key={item.id}\n                                            highlighted={index === highlightedIndex}\n                                        >\n                                            <img width=\"50\" src={item.image} alt={item.title} />\n                                            {item.title}\n                                        </DropDownItem>\n                                    ))}\n                                    {!this.state.items.length &&\n                                        !this.state.loading && <DropDownItem> Nothing Found for {inputValue}</DropDownItem>}\n                                </DropDown>\n                            )}\n                        </div>\n                    )}\n                </Downshift>\n            </SearchStyles>\n        );\n    }\n}\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}