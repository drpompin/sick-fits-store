{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_ITEMS_QUERY($skip: Int = 0, $first: Int = \", \") {\\n    # items below is the endpoint the ALL_ITEMS_QUERY query is hitting @ d backend\\n    items(first: $first, skip: $skip, orderBy: image_DESC) {\\n      id\\n      title\\n      price\\n      description\\n      image\\n      largeImage\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Item from './Item';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\nvar ALL_ITEMS_QUERY = gql(_templateObject(), perPage);\nvar Center = styled.div.withConfig({\n  displayName: \"Items__Center\",\n  componentId: \"tikday-0\"\n})([\"text-align:center;\"]);\nvar ItemsList = styled.div.withConfig({\n  displayName: \"Items__ItemsList\",\n  componentId: \"tikday-1\"\n})([\"display:grid;grid-template-columns:1fr 1fr;grid-gap:60px;max-width:\", \";margin:0 auto;\"], function (props) {\n  return props.theme.maxWidth;\n});\n\nvar Items =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Items, _Component);\n\n  var _super = _createSuper(Items);\n\n  function Items() {\n    _classCallCheck(this, Items);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Items, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Center, null, __jsx(Pagination, {\n        page: this.props.page\n      }), __jsx(Query, {\n        query: ALL_ITEMS_QUERY // fetchPolicy=\"network-only\" ==>The network-only fetchPolicy makes a call to the network\n        // everytime there's the need to update a page. Its doesnt make use of the cache \n        ,\n        variables: {\n          skip: this.props.page * perPage - perPage\n        }\n      }, function (_ref) {\n        var data = _ref.data,\n            error = _ref.error,\n            loading = _ref.loading;\n        if (loading) return __jsx(\"p\", null, \"Loading...\");\n        if (error) return __jsx(\"p\", null, \"Error: \", error.message);\n        return __jsx(ItemsList, null, data.items.map(function (item) {\n          return __jsx(Item, {\n            item: item,\n            key: item.id\n          });\n        }));\n      }), __jsx(Pagination, {\n        page: this.props.page\n      }));\n    }\n  }]);\n\n  return Items;\n}(Component);\n\nexport default Items;\nexport { ALL_ITEMS_QUERY };","map":null,"metadata":{},"sourceType":"module"}