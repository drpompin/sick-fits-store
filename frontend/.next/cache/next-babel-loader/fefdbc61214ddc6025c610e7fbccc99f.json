{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/CreateItem.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage'; //This is the mutation done to push the submitted data to the graphql server\n// It is exported at the bottom for use in other files\n// Basically, this function takes in pre-set variables and creates an item that contains the \n// specified variables as its property\n\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    #The createItem name below is gotten from the graphql schema at the backend; its the called \n    # endpoint on the server side\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n        # We need the id of the item created; hence, id below\n      id\n    }\n  }\n`;\n\nclass CreateItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      title: '',\n      description: '',\n      image: '',\n      largeImage: '',\n      price: 0\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        type,\n        value\n      } = e.target;\n      const val = type === 'number' ? parseFloat(value) : value;\n      this.setState({\n        [name]: val\n      }); //Here, we're using computed property names (es6 destructuring)\n      //so the handleChange function can be used for more than one input field\n    });\n\n    _defineProperty(this, \"uploadFile\", async e => {\n      // console.log('uploading file...');\n      const files = e.target.files;\n      const data = new FormData();\n      data.append('file', files[0]);\n      data.append('upload_preset', 'sickfits');\n      const res = await fetch('https://api.cloudinary.com/v1_1/doednsebg/image/upload', {\n        method: 'POST',\n        body: data\n      });\n      const file = await res.json(); // console.log(file);\n\n      this.setState({\n        image: file.secure_url,\n        largeImage: file.eager[0].secure_url\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: CREATE_ITEM_MUTATION,\n      variables: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, (createItem, {\n      loading,\n      error\n    }) => //This is an implicit return .i.e. It doesnt need a return keyword\n    __jsx(Form, {\n      \"data-test\": \"form\",\n      onSubmit: async e => {\n        // Stop the form from submitting\n        e.preventDefault(); // call the mutation\n\n        const res = await createItem(); //res here means response\n        // change them to the single item page\n\n        console.log('response=======>', res);\n        Router.push({\n          pathname: '/item',\n          query: {\n            id: res.data.createItem.id\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, __jsx(Error, {\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }), __jsx(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, \"Image\", __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      name: \"file\",\n      placeholder: \"Upload an image\",\n      required: true,\n      onChange: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }), this.state.image && __jsx(\"img\", {\n      width: \"200\",\n      src: this.state.image,\n      alt: \"Upload Preview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 37\n      }\n    })), __jsx(\"label\", {\n      htmlFor: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, \"Title\", __jsx(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      placeholder: \"Title\",\n      required: true,\n      value: this.state.title,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 33\n      }\n    })), __jsx(\"label\", {\n      htmlFor: \"price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 29\n      }\n    }, \"Price\", __jsx(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      name: \"price\",\n      placeholder: \"Price\",\n      required: true,\n      value: this.state.price,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 33\n      }\n    })), __jsx(\"label\", {\n      htmlFor: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 29\n      }\n    }, \"Description\", __jsx(\"textarea\", {\n      id: \"description\",\n      name: \"description\",\n      placeholder: \"Enter A Description\",\n      required: true,\n      value: this.state.description,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 33\n      }\n    })), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/CreateItem.js"],"names":["React","Component","Mutation","gql","Router","Form","formatMoney","Error","CREATE_ITEM_MUTATION","CreateItem","title","description","image","largeImage","price","e","name","type","value","target","val","parseFloat","setState","files","data","FormData","append","res","fetch","method","body","file","json","secure_url","eager","render","state","createItem","loading","error","preventDefault","console","log","push","pathname","query","id","uploadFile","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\n\n\n//This is the mutation done to push the submitted data to the graphql server\n// It is exported at the bottom for use in other files\n// Basically, this function takes in pre-set variables and creates an item that contains the \n// specified variables as its property\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    #The createItem name below is gotten from the graphql schema at the backend; its the called \n    # endpoint on the server side\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n        # We need the id of the item created; hence, id below\n      id\n    }\n  }\n`;\n\nclass CreateItem extends Component {\n    // Although Apollo manages the state, state here is used to manage initial state locally\n    // This is because data needs to be stored locally before been sent to the graphql API\n    state = {\n        title: '',\n        description: '',\n        image: '',\n        largeImage: '',\n        price: 0,\n    };\n    handleChange = e => {\n        const { name, type, value } = e.target;\n        const val = type === 'number' ? parseFloat(value) : value;\n        this.setState({ [name]: val }); //Here, we're using computed property names (es6 destructuring)\n        //so the handleChange function can be used for more than one input field\n    };\n\n    uploadFile = async e => {\n        // console.log('uploading file...');\n        const files = e.target.files;\n        const data = new FormData();\n        data.append('file', files[0]);\n        data.append('upload_preset', 'sickfits');\n\n        const res = await fetch('https://api.cloudinary.com/v1_1/doednsebg/image/upload', {\n            method: 'POST',\n            body: data,\n        });\n        const file = await res.json();\n        // console.log(file);\n        this.setState({\n            image: file.secure_url,\n            largeImage: file.eager[0].secure_url,\n        });\n    };\n\n\n    render() {\n        return (\n            <Mutation mutation={CREATE_ITEM_MUTATION} variables={this.state}>\n                {(createItem, { loading, error }) => (\n                    //This is an implicit return .i.e. It doesnt need a return keyword\n                    <Form \n                        data-test = \"form\"\n                        onSubmit={async e => {\n                            // Stop the form from submitting\n                            e.preventDefault();\n                            // call the mutation\n                            const res = await createItem(); //res here means response\n                            // change them to the single item page\n                            console.log('response=======>', res);\n                            Router.push({\n                                pathname: '/item',\n                                query: { id: res.data.createItem.id },\n                            });\n                        }}\n                    >\n                    {/* The error msg is in the ErrorMessage file & is from apollo  */}\n                        <Error error={error} />\n                        {/* Fieldset used here allows us to disable the form if its loading.\n                        Hence, it takes the loading parameter in disabled mode\n                        Aria-busy attribute allows the padding at the top of form to mimic a loading feature */}\n                        <fieldset disabled={loading} aria-busy={loading}>\n                        {/* 'htmlFor' is used for labels because 'for' is a reserved word in react */}\n                            <label htmlFor=\"file\">\n                                Image\n                                <input\n                                    type=\"file\"\n                                    id=\"file\"\n                                    name=\"file\"\n                                    placeholder=\"Upload an image\"\n                                    required\n                                    onChange={this.uploadFile}\n                                />\n                                {this.state.image && (\n                                    <img width=\"200\" src={this.state.image} alt=\"Upload Preview\" />\n                                )}\n                            </label>\n\n                            <label htmlFor=\"title\">\n                                Title\n                                <input\n                                    type=\"text\"\n                                    id=\"title\"\n                                    name=\"title\"\n                                    placeholder=\"Title\"\n                                    required\n                                    value={this.state.title}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n\n                            <label htmlFor=\"price\">\n                                Price\n                                <input\n                                    type=\"number\"\n                                    id=\"price\"\n                                    name=\"price\"\n                                    placeholder=\"Price\"\n                                    required\n                                    value={this.state.price}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n\n                            <label htmlFor=\"description\">\n                                Description\n                                <textarea\n                                    id=\"description\"\n                                    name=\"description\"\n                                    placeholder=\"Enter A Description\"\n                                    required\n                                    value={this.state.description}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                            <button type=\"submit\">Submit</button>\n                        </fieldset>\n                    </Form>\n                )}\n            </Mutation>\n        );\n    }\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };"]},"metadata":{},"sourceType":"module"}