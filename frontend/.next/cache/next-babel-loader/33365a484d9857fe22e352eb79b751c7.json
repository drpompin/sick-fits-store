{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\\n      id\\n      image\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Downshift from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo'; //ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\n\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\nvar SEARCH_ITEMS_QUERY = gql(_templateObject());\nvar SearchInput = styled.input.withConfig({\n  displayName: \"Search__SearchInput\",\n  componentId: \"jovxb7-0\"\n})([\"outline:none;\"]);\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoComplete)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", debounce(function _callee(e, client) {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Searching...'); // turn loading on\n\n              _this.setState({\n                loading: true\n              }); // Manually query apollo client\n\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(client.query({\n                query: SEARCH_ITEMS_QUERY,\n                variables: {\n                  searchTerm: e.target.value\n                }\n              }));\n\n            case 4:\n              res = _context.sent;\n\n              _this.setState({\n                items: res.data.items,\n                loading: false\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }, 350));\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(SearchStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(ApolloConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, function (client) {\n        return __jsx(SearchInput, {\n          type: \"search\",\n          placeholder: \"\\uD83D\\uDD0D\",\n          onChange: function onChange(e) {\n            e.persist();\n\n            _this2.onChange(e, client);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        });\n      }), __jsx(DropDown, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.state.items.map(function (item) {\n        return __jsx(DropDownItem, {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, __jsx(\"img\", {\n          width: \"50\",\n          src: item.image,\n          alt: item.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }), item.title);\n      }))));\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js"],"names":["React","Downshift","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","styled","SEARCH_ITEMS_QUERY","SearchInput","input","AutoComplete","items","loading","e","client","console","log","setState","query","variables","searchTerm","target","value","res","data","persist","onChange","state","map","item","id","image","title","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,cAA/B,C,CACA;AACA;AACA;;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,QAAqD,mBAArD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,IAAMC,kBAAkB,GAAGN,GAAH,mBAAxB;AAUA,IAAMO,WAAW,GAAGF,MAAM,CAACG,KAAV;AAAA;AAAA;AAAA,qBAAjB;;IAIMC,Y;;;;;;;;;;;;;;;;;;4DACM;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE;AAFL,K;;+DAIGV,QAAQ,CAAC,iBAAOW,CAAP,EAAUC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADgB,CAEhB;;AACA,oBAAKC,QAAL,CAAc;AAAEL,gBAAAA,OAAO,EAAE;AAAX,eAAd,EAHgB,CAIhB;;;AAJgB;AAAA,+CAKEE,MAAM,CAACI,KAAP,CAAa;AAC3BA,gBAAAA,KAAK,EAAEX,kBADoB;AAE3BY,gBAAAA,SAAS,EAAE;AAAEC,kBAAAA,UAAU,EAAEP,CAAC,CAACQ,MAAF,CAASC;AAAvB;AAFgB,eAAb,CALF;;AAAA;AAKVC,cAAAA,GALU;;AAShB,oBAAKN,QAAL,CAAc;AACVN,gBAAAA,KAAK,EAAEY,GAAG,CAACC,IAAJ,CAASb,KADN;AAEVC,gBAAAA,OAAO,EAAE;AAFC,eAAd;;AATgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAahB,GAbgB,C;;;;;;;6BAcV;AAAA;;AACL,aACI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,UAAAE,MAAM;AAAA,eACH,MAAC,WAAD;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,WAAW,EAAC,cAFhB;AAGI,UAAA,QAAQ,EAAE,kBAAAD,CAAC,EAAI;AACXA,YAAAA,CAAC,CAACY,OAAF;;AACA,YAAA,MAAI,CAACC,QAAL,CAAcb,CAAd,EAAiBC,MAAjB;AACH,WANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADG;AAAA,OADX,CADJ,EAaI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKa,KAAL,CAAWhB,KAAX,CAAiBiB,GAAjB,CAAqB,UAAAC,IAAI;AAAA,eACtB,MAAC,YAAD;AAAc,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,KAAK,EAAC,IAAX;AAAgB,UAAA,GAAG,EAAED,IAAI,CAACE,KAA1B;AAAiC,UAAA,GAAG,EAAEF,IAAI,CAACG,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEKH,IAAI,CAACG,KAFV,CADsB;AAAA,OAAzB,CADL,CAbJ,CADJ,CADJ;AA0BH;;;;EA9CsBnC,KAAK,CAACoC,S;;AAiDjC,eAAevB,YAAf","sourcesContent":["import React from 'react';\nimport Downshift from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo'; \n//ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nconst SearchInput = styled.input`\n    outline: none;\n`\n\nclass AutoComplete extends React.Component {\n    state = {\n        items: [],\n        loading: false,\n    };\n    onChange = debounce(async (e, client) => {\n        console.log('Searching...');\n        // turn loading on\n        this.setState({ loading: true });\n        // Manually query apollo client\n        const res = await client.query({\n            query: SEARCH_ITEMS_QUERY,\n            variables: { searchTerm: e.target.value },\n        });\n        this.setState({\n            items: res.data.items,\n            loading: false,\n        });\n    }, 350);\n    render() {\n        return (\n            <SearchStyles>\n                <div>\n                    <ApolloConsumer>\n                        {client => (\n                            <SearchInput\n                                type=\"search\"\n                                placeholder=\"&#x1F50D;\"\n                                onChange={e => {\n                                    e.persist();\n                                    this.onChange(e, client);\n                                }}\n                            />\n                        )}\n                    </ApolloConsumer>\n                    <DropDown>\n                        {this.state.items.map(item => (\n                            <DropDownItem key={item.id}>\n                                <img width=\"50\" src={item.image} alt={item.title} />\n                                {item.title}\n                            </DropDownItem>\n                        ))}\n                    </DropDown>\n                </div>\n            </SearchStyles>\n        );\n    }\n}\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}