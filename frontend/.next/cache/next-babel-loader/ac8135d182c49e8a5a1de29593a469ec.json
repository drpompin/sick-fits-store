{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Cart.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { adopt } from 'react-adopt';\nimport User from './User';\nimport CartStyles from './styles/CartStyles';\nimport Supreme from './styles/Supreme';\nimport CloseButton from './styles/CloseButton';\nimport SickButton from './styles/SickButton';\nimport CartItem from './CartItem';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport formatMoney from '../lib/formatMoney';\nconst LOCAL_STATE_QUERY = gql`\n  query {\n    #   The @client in d below line ensures that apollo doesnt query the server but d client\n    cartOpen @client\n  }\n`;\nconst TOGGLE_CART_MUTATION = gql`\n  mutation {\n    toggleCart @client\n  }\n`;\n/* adopt from \"react-adopt\" package is used here. It helps to deal with issues arising from \n renderProp */\n\n/* It composes all the renderProps functions into a single composed fxn/component that will \n eventually expose all the needed props */\n\n/* eslint-disable */\n\nconst Composed = adopt({\n  /* variable Composed is declared and equates to adopt which takes an object of all the \n   things we are composing together */\n  user: ({\n    render\n  }) => __jsx(User, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, render),\n  toggleCart: ({\n    render\n  }) => __jsx(Mutation, {\n    mutation: TOGGLE_CART_MUTATION,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, render),\n  localState: ({\n    render\n  }) => __jsx(Query, {\n    query: LOCAL_STATE_QUERY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, render)\n});\n/* eslint-enable */\n\nconst Cart = () => __jsx(Composed, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}, ({\n  user,\n  toggleCart,\n  localState\n}) => {\n  const me = user.data.me;\n  if (!me) return null;\n  return __jsx(CartStyles, {\n    open: localState.data.cartOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(CloseButton, {\n    onClick: toggleCart,\n    title: \"close\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"\\xD7\"), __jsx(Supreme, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, me.name, \"'s Cart\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"You Have \", me.cart.length, \" Item\", me.cart.length === 1 ? '' : 's', \" in your cart.\")), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, me.cart.map(cartItem => __jsx(CartItem, {\n    key: cartItem.id,\n    cartItem: cartItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }))), __jsx(\"footer\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, formatMoney(calcTotalPrice(me.cart))), __jsx(SickButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Checkout\")));\n});\n\nexport default Cart;\nexport { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION }; // import React from 'react';\n// import { Query, Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import User from './User';\n// import CartStyles from './styles/CartStyles';\n// import Supreme from './styles/Supreme';\n// import CloseButton from './styles/CloseButton';\n// import SickButton from './styles/SickButton';\n// import CartItem from './CartItem';\n// import calcTotalPrice from '../lib/calcTotalPrice';\n// import formatMoney from '../lib/formatMoney';\n// const LOCAL_STATE_QUERY = gql`\n//   query {\n//     #   The @client in d below line ensures that apollo doesnt query the server but d client\n//     cartOpen @client\n//   }\n// `;\n// const TOGGLE_CART_MUTATION = gql`\n//   mutation {\n//     toggleCart @client\n//   }\n// `;\n// const Cart = () => (\n//     <User>\n//         {({ data: { me } }) => {\n//             if (!me) return null;\n//             console.log(me);\n//             return (\n//                 <Mutation mutation={TOGGLE_CART_MUTATION}>\n//                     {toggleCart => (\n//                         <Query query={LOCAL_STATE_QUERY}>\n//                             {({ data }) => (\n//                                 <CartStyles open={data.cartOpen}>\n//                                     <header>\n//                                         <CloseButton onClick={toggleCart} title=\"close\">\n//                                             &times;\n//                                         </CloseButton>\n//                                         <Supreme>{me.name}'s Cart</Supreme>\n//                                         <p>\n//                                             You Have {me.cart.length} Item{me.cart.length === 1 ? '' : 's'} in your cart.\n//                                         </p>\n//                                     </header>\n//                                     <ul>\n//                                         {me.cart.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem} />)}\n//                                     </ul>\n//                                     <footer>\n//                                         <p>{formatMoney(calcTotalPrice(me.cart))}</p>\n//                                         <SickButton>Checkout</SickButton>\n//                                     </footer>\n//                                 </CartStyles>\n//                             )}\n//                         </Query>\n//                     )}\n//                 </Mutation>\n//             );\n//         }}\n//     </User>\n// );\n// export default Cart;\n// export { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Cart.js"],"names":["React","Query","Mutation","gql","adopt","User","CartStyles","Supreme","CloseButton","SickButton","CartItem","calcTotalPrice","formatMoney","LOCAL_STATE_QUERY","TOGGLE_CART_MUTATION","Composed","user","render","toggleCart","localState","Cart","me","data","cartOpen","name","cart","length","map","cartItem","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { adopt } from 'react-adopt';\nimport User from './User';\nimport CartStyles from './styles/CartStyles';\nimport Supreme from './styles/Supreme';\nimport CloseButton from './styles/CloseButton';\nimport SickButton from './styles/SickButton';\nimport CartItem from './CartItem';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport formatMoney from '../lib/formatMoney';\n\nconst LOCAL_STATE_QUERY = gql`\n  query {\n    #   The @client in d below line ensures that apollo doesnt query the server but d client\n    cartOpen @client\n  }\n`;\n\nconst TOGGLE_CART_MUTATION = gql`\n  mutation {\n    toggleCart @client\n  }\n`;\n\n/* adopt from \"react-adopt\" package is used here. It helps to deal with issues arising from \n renderProp */\n/* It composes all the renderProps functions into a single composed fxn/component that will \n eventually expose all the needed props */\n\n\n/* eslint-disable */\nconst Composed = adopt({\n    /* variable Composed is declared and equates to adopt which takes an object of all the \n     things we are composing together */\n    user: ({ render }) => <User>{render}</User>,\n    toggleCart: ({ render }) => <Mutation mutation={TOGGLE_CART_MUTATION}>{render}</Mutation>,\n    localState: ({ render }) => <Query query={LOCAL_STATE_QUERY}>{render}</Query>,\n});\n/* eslint-enable */\n\nconst Cart = () => (\n    <Composed>\n        {({ user, toggleCart, localState }) => {\n            const me = user.data.me;\n            if (!me) return null;\n            return (\n                <CartStyles open={localState.data.cartOpen}>\n                    <header>\n                        <CloseButton onClick={toggleCart} title=\"close\">\n                            &times;\n            </CloseButton>\n                        <Supreme>{me.name}'s Cart</Supreme>\n                        <p>\n                            You Have {me.cart.length} Item{me.cart.length === 1 ? '' : 's'} in your cart.\n            </p>\n                    </header>\n                    <ul>{me.cart.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem} />)}</ul>\n                    <footer>\n                        <p>{formatMoney(calcTotalPrice(me.cart))}</p>\n                        <SickButton>Checkout</SickButton>\n                    </footer>\n                </CartStyles>\n            );\n        }}\n    </Composed>\n);\n\nexport default Cart;\nexport { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };\n\n\n\n\n\n// import React from 'react';\n// import { Query, Mutation } from 'react-apollo';\n// import gql from 'graphql-tag';\n// import User from './User';\n// import CartStyles from './styles/CartStyles';\n// import Supreme from './styles/Supreme';\n// import CloseButton from './styles/CloseButton';\n// import SickButton from './styles/SickButton';\n// import CartItem from './CartItem';\n// import calcTotalPrice from '../lib/calcTotalPrice';\n// import formatMoney from '../lib/formatMoney';\n\n// const LOCAL_STATE_QUERY = gql`\n//   query {\n//     #   The @client in d below line ensures that apollo doesnt query the server but d client\n//     cartOpen @client\n//   }\n// `;\n\n// const TOGGLE_CART_MUTATION = gql`\n//   mutation {\n//     toggleCart @client\n//   }\n// `;\n\n// const Cart = () => (\n//     <User>\n//         {({ data: { me } }) => {\n//             if (!me) return null;\n//             console.log(me);\n//             return (\n//                 <Mutation mutation={TOGGLE_CART_MUTATION}>\n//                     {toggleCart => (\n//                         <Query query={LOCAL_STATE_QUERY}>\n//                             {({ data }) => (\n//                                 <CartStyles open={data.cartOpen}>\n//                                     <header>\n//                                         <CloseButton onClick={toggleCart} title=\"close\">\n//                                             &times;\n//                                         </CloseButton>\n//                                         <Supreme>{me.name}'s Cart</Supreme>\n//                                         <p>\n//                                             You Have {me.cart.length} Item{me.cart.length === 1 ? '' : 's'} in your cart.\n//                                         </p>\n//                                     </header>\n//                                     <ul>\n//                                         {me.cart.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem} />)}\n//                                     </ul>\n//                                     <footer>\n//                                         <p>{formatMoney(calcTotalPrice(me.cart))}</p>\n//                                         <SickButton>Checkout</SickButton>\n//                                     </footer>\n//                                 </CartStyles>\n//                             )}\n//                         </Query>\n//                     )}\n//                 </Mutation>\n//             );\n//         }}\n//     </User>\n// );\n\n// export default Cart;\n// export { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };\n"]},"metadata":{},"sourceType":"module"}