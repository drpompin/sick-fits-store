{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\\n      id\\n      image\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react'; // Downshift allows us to use the arrow keys to scroll in the search box. It also enables close\n// on escape key or on outside click\n\nimport Downshift, { g } from 'downshift';\nimport Router from 'next/router'; //ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\n\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag'; //debounce prevents unnecessary query of the apollo client by delaying the time to run the query\n\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\nvar SEARCH_ITEMS_QUERY = gql(_templateObject());\nvar SearchInput = styled.input.withConfig({\n  displayName: \"Search__SearchInput\",\n  componentId: \"jovxb7-0\"\n})([\"outline:none;\"]);\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id\n    }\n  });\n}\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoComplete)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", debounce(function _callee(e, client) {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Searching...'); // turn loading on\n\n              _this.setState({\n                loading: true\n              }); // Manually query apollo client\n\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(client.query({\n                query: SEARCH_ITEMS_QUERY,\n                variables: {\n                  searchTerm: e.target.value\n                }\n              }));\n\n            case 4:\n              res = _context.sent;\n\n              _this.setState({\n                items: res.data.items,\n                loading: false\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }, 350));\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(SearchStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(Downshift, {\n        onChange: routeToItem,\n        itemToString: function itemToString(item) {\n          return item === null ? '' : item.title;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, function (_ref) {\n        var getInputProps = _ref.getInputProps,\n            getItemProps = _ref.getItemProps,\n            isOpen = _ref.isOpen,\n            inputValue = _ref.inputValue,\n            highlightedIndex = _ref.highlightedIndex;\n        return __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, __jsx(ApolloConsumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, function (client) {\n          return __jsx(SearchInput, _extends({}, getInputProps({\n            type: 'search',\n            placeholder: 'Search For An Item',\n            id: 'search',\n            className: _this2.state.loading ? 'loading' : '',\n            onChange: function onChange(e) {\n              e.persist();\n\n              _this2.onChange(e, client);\n            }\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }));\n        }), isOpen && __jsx(DropDown, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, _this2.state.items.map(function (item, index) {\n          return __jsx(DropDownItem, _extends({}, getItemProps({\n            item: item\n          }), {\n            key: item.id,\n            highlighted: index === highlightedIndex,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }), __jsx(\"img\", {\n            width: \"50\",\n            src: item.image,\n            alt: item.title,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }), item.title);\n        }), !_this2.state.items.length && !_this2.state.loading && __jsx(DropDownItem, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \" Nothing Found for \", inputValue)));\n      }));\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js"],"names":["React","Downshift","g","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","styled","SEARCH_ITEMS_QUERY","SearchInput","input","routeToItem","item","push","pathname","query","id","AutoComplete","items","loading","e","client","console","log","setState","variables","searchTerm","target","value","res","data","title","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","state","onChange","persist","map","index","image","length","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n// Downshift allows us to use the arrow keys to scroll in the search box. It also enables close\n// on escape key or on outside click\nimport Downshift, { g } from 'downshift';\nimport Router from 'next/router';\n//ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\nimport { ApolloConsumer } from 'react-apollo'; \nimport gql from 'graphql-tag';\n//debounce prevents unnecessary query of the apollo client by delaying the time to run the query\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\n\n\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\n\n\nconst SearchInput = styled.input`\n    outline: none;\n`\n\n\nfunction routeToItem(item) {\n    Router.push({\n        pathname: '/item',\n        query: {\n            id: item.id,\n        },\n    });\n}\n\nclass AutoComplete extends React.Component {\n    state = {\n        items: [],\n        loading: false,\n    };\n    onChange = debounce(async (e, client) => {\n        console.log('Searching...');\n        // turn loading on\n        this.setState({ loading: true });\n        // Manually query apollo client\n        const res = await client.query({\n            query: SEARCH_ITEMS_QUERY,\n            variables: { searchTerm: e.target.value },\n        });\n        this.setState({\n            items: res.data.items,\n            loading: false,\n        });\n    }, 350);\n    render() {\n        return (\n            <SearchStyles>\n                <Downshift onChange={routeToItem} itemToString={item => (item === null ? '' : item.title)}>\n                    {({ getInputProps, getItemProps, isOpen, inputValue, highlightedIndex }) => (\n                        <div>\n                            <ApolloConsumer>\n                                {client => (\n                                    <SearchInput\n                                        {...getInputProps({\n                                            type: 'search',\n                                            placeholder: 'Search For An Item',\n                                            id: 'search',\n                                            className: this.state.loading ? 'loading' : '',\n                                            onChange: e => {\n                                                e.persist();\n                                                this.onChange(e, client);\n                                            },\n                                        })}\n                                    />\n                                )}\n                            </ApolloConsumer>\n                            {isOpen && (\n                                <DropDown>\n                                    {this.state.items.map((item, index) => (\n                                        <DropDownItem\n                                            {...getItemProps({ item })}\n                                            key={item.id}\n                                            highlighted={index === highlightedIndex}\n                                        >\n                                            <img width=\"50\" src={item.image} alt={item.title} />\n                                            {item.title}\n                                        </DropDownItem>\n                                    ))}\n                                    {!this.state.items.length &&\n                                        !this.state.loading && <DropDownItem> Nothing Found for {inputValue}</DropDownItem>}\n                                </DropDown>\n                            )}\n                        </div>\n                    )}\n                </Downshift>\n            </SearchStyles>\n        );\n    }\n}\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}