{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/AddToCart.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation addToCart($id: ID!) {\\n    # addToCart below is the mutation endpoint that is called on the server side and id is passed to \\n    # it as in ($id: $id!). id and quantity are what we are demanding from the endpoint\\n    addToCart(id: $id) {\\n      id\\n      quantity\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport styled from 'styled-components';\nvar ADD_TO_CART_MUTATION = gql(_templateObject());\nvar AddToCartButton = styled.button.withConfig({\n  displayName: \"AddToCart__AddToCartButton\",\n  componentId: \"sc-1syyje4-0\"\n})([\"cursor:pointer;outline:none;\"]);\n\nvar AddToCart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddToCart, _React$Component);\n\n  var _super = _createSuper(AddToCart);\n\n  function AddToCart() {\n    _classCallCheck(this, AddToCart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AddToCart, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var id = this.props.id; // console.log('props in addToCart====', this.props, id);\n\n      return __jsx(Mutation, {\n        mutation: ADD_TO_CART_MUTATION,\n        variables: {\n          id: id\n        } // refetchQueries used below functions to update the ui from the cache when changes are \n        // made on the UI; there's no need to refresh the page everytime a new task is done except when \n        // necessary\n        ,\n        refetchQueries: [{\n          query: CURRENT_USER_QUERY\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }\n      }, function (addToCart, _ref) {\n        var loading = _ref.loading;\n        return __jsx(AddToCartButton, {\n          disabled: loading,\n          onClick: addToCart,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }\n        }, \"Add\", loading && 'ing', \" To Cart \\uD83D\\uDED2\");\n      });\n    }\n  }]);\n\n  return AddToCart;\n}(React.Component);\n\nexport default AddToCart;\nexport { ADD_TO_CART_MUTATION };","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/AddToCart.js"],"names":["React","Mutation","gql","CURRENT_USER_QUERY","styled","ADD_TO_CART_MUTATION","AddToCartButton","button","AddToCart","id","props","query","addToCart","loading","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,IAAMC,oBAAoB,GAAGH,GAAH,mBAA1B;AAWA,IAAMI,eAAe,GAAGF,MAAM,CAACG,MAAV;AAAA;AAAA;AAAA,oCAArB;;IAKMC,S;;;;;;;;;;;;;;;6BACO;AAAA;;AAAA,UACGC,EADH,GACU,KAAKC,KADf,CACGD,EADH,EAEL;;AACA,aACI,MAAC,QAAD;AACI,QAAA,QAAQ,EAAEJ,oBADd;AAEI,QAAA,SAAS,EAAE;AACPI,UAAAA,EAAE,EAAFA;AADO,SAFf,CAKA;AACA;AACA;AAPA;AAQI,QAAA,cAAc,EAAE,CAAC;AAAEE,UAAAA,KAAK,EAAER;AAAT,SAAD,CARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUK,UAACS,SAAD;AAAA,YAAcC,OAAd,QAAcA,OAAd;AAAA,eACG,MAAC,eAAD;AAAiB,UAAA,QAAQ,EAAEA,OAA3B;AAAoC,UAAA,OAAO,EAAED,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQC,OAAO,IAAI,KADnB,0BADH;AAAA,OAVL,CADJ;AAkBH;;;;EAtBmBb,KAAK,CAACc,S;;AAwB9B,eAAeN,SAAf;AACA,SAASH,oBAAT","sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport styled from 'styled-components';\n\nconst ADD_TO_CART_MUTATION = gql`\n  mutation addToCart($id: ID!) {\n    # addToCart below is the mutation endpoint that is called on the server side and id is passed to \n    # it as in ($id: $id!). id and quantity are what we are demanding from the endpoint\n    addToCart(id: $id) {\n      id\n      quantity\n    }\n  }\n`;\n\nconst AddToCartButton = styled.button`\n    cursor: pointer;\n    outline: none;\n`\n\nclass AddToCart extends React.Component {\n    render() {\n        const { id } = this.props;\n        // console.log('props in addToCart====', this.props, id);\n        return (\n            <Mutation\n                mutation={ADD_TO_CART_MUTATION}\n                variables={{\n                    id,\n                }}\n            // refetchQueries used below functions to update the ui from the cache when changes are \n            // made on the UI; there's no need to refresh the page everytime a new task is done except when \n            // necessary\n                refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n            >\n                {(addToCart, { loading }) => (\n                    <AddToCartButton disabled={loading} onClick={addToCart}>\n                        Add{loading && 'ing'} To Cart ðŸ›’\n                    </AddToCartButton>\n                )}\n            </Mutation>\n        );\n    }\n}\nexport default AddToCart;\nexport { ADD_TO_CART_MUTATION };"]},"metadata":{},"sourceType":"module"}