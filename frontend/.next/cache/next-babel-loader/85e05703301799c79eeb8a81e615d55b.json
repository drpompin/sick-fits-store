{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Downshift from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo'; //ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\n\nimport gql from 'graphql-tag'; //debounce prevents unnecessary query of the apollo client by delaying the time to run the quer\n\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\nconst SearchInput = styled.input.withConfig({\n  displayName: \"Search__SearchInput\",\n  componentId: \"jovxb7-0\"\n})([\"outline:none;\"]);\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      console.log('Searching...'); // turn loading on\n\n      this.setState({\n        loading: true\n      }); // Manually query apollo client\n\n      const res = await client.query({\n        query: SEARCH_ITEMS_QUERY,\n        variables: {\n          searchTerm: e.target.value\n        }\n      });\n      this.setState({\n        items: res.data.items,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    return __jsx(SearchStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(ApolloConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, client => __jsx(SearchInput, {\n      type: \"search\",\n      placeholder: \"\\uD83D\\uDD0D\",\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), __jsx(DropDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.state.items.map(item => __jsx(DropDownItem, {\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      width: \"50\",\n      src: item.image,\n      alt: item.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), item.title)))));\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/Search.js"],"names":["React","Downshift","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","styled","SEARCH_ITEMS_QUERY","SearchInput","input","AutoComplete","Component","items","loading","e","client","console","log","setState","res","query","variables","searchTerm","target","value","data","render","persist","onChange","state","map","item","id","image","title"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,cAA/B,C,CACA;AACA;AACA;;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,QAAqD,mBAArD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,kBAAkB,GAAGN,GAAI;;;;;;;;CAA/B;AAUA,MAAMO,WAAW,GAAGF,MAAM,CAACG,KAAV;AAAA;AAAA;AAAA,qBAAjB;;AAIA,MAAMC,YAAN,SAA2Bb,KAAK,CAACc,SAAjC,CAA2C;AAAA;AAAA;;AAAA,mCAC/B;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAD+B;;AAAA,sCAK5BX,QAAQ,CAAC,OAAOY,CAAP,EAAUC,MAAV,KAAqB;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADqC,CAErC;;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAAd,EAHqC,CAIrC;;AACA,YAAMM,GAAG,GAAG,MAAMJ,MAAM,CAACK,KAAP,CAAa;AAC3BA,QAAAA,KAAK,EAAEb,kBADoB;AAE3Bc,QAAAA,SAAS,EAAE;AAAEC,UAAAA,UAAU,EAAER,CAAC,CAACS,MAAF,CAASC;AAAvB;AAFgB,OAAb,CAAlB;AAIA,WAAKN,QAAL,CAAc;AACVN,QAAAA,KAAK,EAAEO,GAAG,CAACM,IAAJ,CAASb,KADN;AAEVC,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIH,KAbkB,EAahB,GAbgB,CALoB;AAAA;;AAmBvCa,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKX,MAAM,IACH,MAAC,WAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,WAAW,EAAC,cAFhB;AAGI,MAAA,QAAQ,EAAED,CAAC,IAAI;AACXA,QAAAA,CAAC,CAACa,OAAF;AACA,aAAKC,QAAL,CAAcd,CAAd,EAAiBC,MAAjB;AACH,OANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR,CADJ,EAaI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKc,KAAL,CAAWjB,KAAX,CAAiBkB,GAAjB,CAAqBC,IAAI,IACtB,MAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAC,IAAX;AAAgB,MAAA,GAAG,EAAED,IAAI,CAACE,KAA1B;AAAiC,MAAA,GAAG,EAAEF,IAAI,CAACG,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKH,IAAI,CAACG,KAFV,CADH,CADL,CAbJ,CADJ,CADJ;AA0BH;;AA9CsC;;AAiD3C,eAAexB,YAAf","sourcesContent":["import React from 'react';\nimport Downshift from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo'; \n//ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\nimport gql from 'graphql-tag';\n\n//debounce prevents unnecessary query of the apollo client by delaying the time to run the quer\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nconst SearchInput = styled.input`\n    outline: none;\n`\n\nclass AutoComplete extends React.Component {\n    state = {\n        items: [],\n        loading: false,\n    };\n    onChange = debounce(async (e, client) => {\n        console.log('Searching...');\n        // turn loading on\n        this.setState({ loading: true });\n        // Manually query apollo client\n        const res = await client.query({\n            query: SEARCH_ITEMS_QUERY,\n            variables: { searchTerm: e.target.value },\n        });\n        this.setState({\n            items: res.data.items,\n            loading: false,\n        });\n    }, 350);\n    render() {\n        return (\n            <SearchStyles>\n                <div>\n                    <ApolloConsumer>\n                        {client => (\n                            <SearchInput\n                                type=\"search\"\n                                placeholder=\"&#x1F50D;\"\n                                onChange={e => {\n                                    e.persist();\n                                    this.onChange(e, client);\n                                }}\n                            />\n                        )}\n                    </ApolloConsumer>\n                    <DropDown>\n                        {this.state.items.map(item => (\n                            <DropDownItem key={item.id}>\n                                <img width=\"50\" src={item.image} alt={item.title} />\n                                {item.title}\n                            </DropDownItem>\n                        ))}\n                    </DropDown>\n                </div>\n            </SearchStyles>\n        );\n    }\n}\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}