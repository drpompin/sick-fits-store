{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\\n      id\\n      image\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react'; // Downshift allows us to use the arrow keys to scroll in the search box. It also enables close\n// on escape key or on outside click\n\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router'; //ApolloConsumer gives us direct access to the apollo client; Hence, prevents querying of the \n// db everytime a page loads. On the apollo-client, we can manually run queries rather than\n// using a renderProp\n\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag'; //debounce prevents unnecessary query of the apollo client by delaying the time to run the query\n\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nimport styled from 'styled-components';\nvar SEARCH_ITEMS_QUERY = gql(_templateObject());\nvar SearchInput = styled.input.withConfig({\n  displayName: \"Search__SearchInput\",\n  componentId: \"jovxb7-0\"\n})([\"outline:none;\"]);\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id\n    }\n  });\n}\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  var _super = _createSuper(AutoComplete);\n\n  function AutoComplete() {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", debounce(function _callee(e, client) {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Searching...'); // turn loading on\n\n              _this.setState({\n                loading: true\n              }); // Manually query apollo client\n\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(client.query({\n                query: SEARCH_ITEMS_QUERY,\n                variables: {\n                  searchTerm: e.target.value\n                }\n              }));\n\n            case 4:\n              res = _context.sent;\n\n              _this.setState({\n                items: res.data.items,\n                loading: false\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 350));\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      resetIdCounter();\n      return __jsx(SearchStyles, null, __jsx(Downshift, {\n        onChange: routeToItem,\n        itemToString: function itemToString(item) {\n          return item === null ? '' : item.title;\n        }\n      }, function (_ref) {\n        var getInputProps = _ref.getInputProps,\n            getItemProps = _ref.getItemProps,\n            isOpen = _ref.isOpen,\n            inputValue = _ref.inputValue,\n            highlightedIndex = _ref.highlightedIndex;\n        return __jsx(\"div\", null, __jsx(ApolloConsumer, null, function (client) {\n          return __jsx(SearchInput, getInputProps({\n            type: 'search',\n            placeholder: 'Search For An Item',\n            id: 'search',\n            className: _this2.state.loading ? 'loading' : '',\n            onChange: function onChange(e) {\n              e.persist();\n\n              _this2.onChange(e, client);\n            }\n          }));\n        }), isOpen && __jsx(DropDown, null, _this2.state.items.map(function (item, index) {\n          return __jsx(DropDownItem, _extends({}, getItemProps({\n            item: item\n          }), {\n            key: item.id,\n            highlighted: index === highlightedIndex\n          }), __jsx(\"img\", {\n            width: \"50\",\n            src: item.image,\n            alt: item.title\n          }), item.title);\n        }), !_this2.state.items.length && !_this2.state.loading && __jsx(DropDownItem, null, \" Nothing Found for \", inputValue)));\n      }));\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}