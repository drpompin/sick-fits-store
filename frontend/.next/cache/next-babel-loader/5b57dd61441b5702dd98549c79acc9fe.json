{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_ORDER_QUERY($id: ID!) {\\n    order(id: $id) {\\n      id\\n      charge\\n      total\\n      createdAt\\n      user {\\n        id\\n      }\\n      items {\\n        id\\n        title\\n        description\\n        price\\n        image\\n        quantity\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { format } from 'date-fns';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\nimport OrderStyles from './styles/OrderStyles';\nvar SINGLE_ORDER_QUERY = gql(_templateObject());\n\nvar Order =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Order, _React$Component);\n\n  var _super = _createSuper(Order);\n\n  function Order() {\n    _classCallCheck(this, Order);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Order, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      console.log('this.props======', this.props);\n      return __jsx(Query, {\n        query: SINGLE_ORDER_QUERY,\n        variables: {\n          id: this.props.id\n        }\n      }, function (_ref) {\n        var data = _ref.data,\n            error = _ref.error,\n            loading = _ref.loading;\n        if (error) return __jsx(Error, {\n          error: error\n        });\n        if (loading) return __jsx(\"p\", null, \"Loading...\");\n        var order = data.order;\n        return __jsx(OrderStyles, {\n          \"data-test\": \"order\"\n        }, __jsx(Head, null, __jsx(\"title\", null, \"Sick Fits - Order \", order.id)), __jsx(\"p\", null, __jsx(\"span\", null, \"Order ID:\"), __jsx(\"span\", null, _this.props.id)), __jsx(\"p\", null, __jsx(\"span\", null, \"Charge\"), __jsx(\"span\", null, order.charge)), __jsx(\"p\", null, __jsx(\"span\", null, \"Date\"), __jsx(\"span\", null, format(order.createdAt, 'MMMM d, YYYY h:mm a'))), __jsx(\"p\", null, __jsx(\"span\", null, \"Order Total\"), __jsx(\"span\", null, formatMoney(order.total))), __jsx(\"p\", null, __jsx(\"span\", null, \"Item Count\"), __jsx(\"span\", null, order.items.length)), __jsx(\"div\", {\n          className: \"items\"\n        }, order.items.map(function (item) {\n          return __jsx(\"div\", {\n            className: \"order-item\",\n            key: item.id\n          }, __jsx(\"img\", {\n            src: item.image,\n            alt: item.title\n          }), __jsx(\"div\", {\n            className: \"item-details\"\n          }, __jsx(\"h2\", null, item.title), __jsx(\"p\", null, \"Qty: \", item.quantity), __jsx(\"p\", null, \"Each: \", formatMoney(item.price)), __jsx(\"p\", null, \"SubTotal: \", formatMoney(item.price * item.quantity)), __jsx(\"p\", null, item.description)));\n        })));\n      });\n    }\n  }]);\n\n  return Order;\n}(React.Component);\n\nexport default Order;\nexport { SINGLE_ORDER_QUERY };","map":null,"metadata":{},"sourceType":"module"}