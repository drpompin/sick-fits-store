{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/TakeMyMoney.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass TakeMyMoney extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onToken\", async (res, createOrder) => {\n      console.log('On Token Called!');\n      console.log(res.id); // manually call the mutation once we have the stripe token\n\n      const order = await createOrder({\n        variables: {\n          token: res.id\n        }\n      }).catch(err => {\n        alert(err.message);\n      });\n      console.log('order===', order);\n    });\n  }\n\n  render() {\n    return __jsx(User, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, ({\n      data: {\n        me\n      }\n    }) => __jsx(Mutation, {\n      mutation: CREATE_ORDER_MUTATION,\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, createOrder => __jsx(StripeCheckout, {\n      amount: calcTotalPrice(me.cart),\n      name: \"Sick Fits\",\n      description: `Order of ${totalItems(me.cart)} items!`,\n      image: me.cart.length && me.cart[0].item && me.cart[0].item.image // stripeKey=\"pk_test_Vtknn6vSdcZWSG2JWvEiWSqC\"\n      ,\n      stripeKey: \"pk_test_TpDWdng7KOHpVzuklXgxwxO400N0cmGCZP\",\n      currency: \"USD\",\n      email: me.email,\n      token: res => this.onToken(res, createOrder),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.props.children)));\n  }\n\n}\n\nexport default TakeMyMoney;","map":{"version":3,"sources":["/Users/mac/Documents/ColabVideos/Advanced-React/sick-fits/frontend/components/TakeMyMoney.js"],"names":["React","StripeCheckout","Mutation","Router","NProgress","PropTypes","gql","calcTotalPrice","Error","User","CURRENT_USER_QUERY","CREATE_ORDER_MUTATION","totalItems","cart","reduce","tally","cartItem","quantity","TakeMyMoney","Component","res","createOrder","console","log","id","order","variables","token","catch","err","alert","message","render","data","me","query","length","item","image","email","onToken","props","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,IAAeC,kBAAf,QAAyC,QAAzC;AAEA,MAAMC,qBAAqB,GAAGL,GAAI;;;;;;;;;;;;CAAlC;;AAcA,SAASM,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,KAAD,EAAQC,QAAR,KAAqBD,KAAK,GAAGC,QAAQ,CAACC,QAAlD,EAA4D,CAA5D,CAAP;AACH;;AAED,MAAMC,WAAN,SAA0BlB,KAAK,CAACmB,SAAhC,CAA0C;AAAA;AAAA;;AAAA,qCAC5B,OAAOC,GAAP,EAAYC,WAAZ,KAA4B;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,EAAhB,EAFkC,CAGlC;;AACA,YAAMC,KAAK,GAAG,MAAMJ,WAAW,CAAC;AAC5BK,QAAAA,SAAS,EAAE;AACPC,UAAAA,KAAK,EAAEP,GAAG,CAACI;AADJ;AADiB,OAAD,CAAX,CAIjBI,KAJiB,CAIXC,GAAG,IAAI;AACZC,QAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACH,OANmB,CAApB;AAOAT,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,KAAxB;AACH,KAbqC;AAAA;;AAetCO,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AAAR,KAAD,KACG,MAAC,QAAD;AACI,MAAA,QAAQ,EAAEvB,qBADd;AAEI,MAAA,cAAc,EAAE,CAAC;AAAEwB,QAAAA,KAAK,EAAEzB;AAAT,OAAD,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIKW,WAAW,IACR,MAAC,cAAD;AACI,MAAA,MAAM,EAAEd,cAAc,CAAC2B,EAAE,CAACrB,IAAJ,CAD1B;AAEI,MAAA,IAAI,EAAC,WAFT;AAGI,MAAA,WAAW,EAAG,YAAWD,UAAU,CAACsB,EAAE,CAACrB,IAAJ,CAAU,SAHjD;AAII,MAAA,KAAK,EAAEqB,EAAE,CAACrB,IAAH,CAAQuB,MAAR,IAAkBF,EAAE,CAACrB,IAAH,CAAQ,CAAR,EAAWwB,IAA7B,IAAqCH,EAAE,CAACrB,IAAH,CAAQ,CAAR,EAAWwB,IAAX,CAAgBC,KAJhE,CAKI;AALJ;AAMI,MAAA,SAAS,EAAC,4CANd;AAOI,MAAA,QAAQ,EAAC,KAPb;AAQI,MAAA,KAAK,EAAEJ,EAAE,CAACK,KARd;AASI,MAAA,KAAK,EAAEnB,GAAG,IAAI,KAAKoB,OAAL,CAAapB,GAAb,EAAkBC,WAAlB,CATlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWK,KAAKoB,KAAL,CAAWC,QAXhB,CALR,CAFR,CADJ;AA0BH;;AA1CqC;;AA6C1C,eAAexB,WAAf","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n    return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass TakeMyMoney extends React.Component {\n    onToken = async (res, createOrder) => {\n        console.log('On Token Called!');\n        console.log(res.id);\n        // manually call the mutation once we have the stripe token\n        const order = await createOrder({\n            variables: {\n                token: res.id,\n            },\n        }).catch(err => {\n            alert(err.message);\n        });\n        console.log('order===', order);\n    };\n\n    render() {\n        return (\n            <User>\n                {({ data: { me } }) => (\n                    <Mutation\n                        mutation={CREATE_ORDER_MUTATION}\n                        refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n                    >\n                        {createOrder => (\n                            <StripeCheckout\n                                amount={calcTotalPrice(me.cart)}\n                                name=\"Sick Fits\"\n                                description={`Order of ${totalItems(me.cart)} items!`}\n                                image={me.cart.length && me.cart[0].item && me.cart[0].item.image}\n                                // stripeKey=\"pk_test_Vtknn6vSdcZWSG2JWvEiWSqC\"\n                                stripeKey=\"pk_test_TpDWdng7KOHpVzuklXgxwxO400N0cmGCZP\"\n                                currency=\"USD\"\n                                email={me.email}\n                                token={res => this.onToken(res, createOrder)}\n                            >\n                                {this.props.children}\n                            </StripeCheckout>\n                        )}\n                    </Mutation>\n                )}\n            </User>\n        );\n    }\n}\n\nexport default TakeMyMoney;"]},"metadata":{},"sourceType":"module"}